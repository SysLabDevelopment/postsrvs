def getConvertListe(useAndroidX) {
  def list = [
          ["com.google.android.gms.maps.model", "com.google.android.libraries.maps.model"],
          ["com.google.android.gms.maps", "com.google.android.libraries.maps"]
  ]

  if (!useAndroidX) {
    def tmp;
    def listN = list.size()
    for (int i = 0; i < listN; i++) {
      tmp = list[i][0]
      list[i][0] = list[i][1]
      list[i][1] = tmp
    }
  }
  return list
}


def searchFileInParents(target) {
  def searchPath = target
  for (int i = 0; i < 8; i++) {
    println(searchPath)
    def targetFile = file(searchPath)
    if(!targetFile.canRead()) {
      searchPath = '../' + searchPath;
    } else {
      return targetFile;
    }
  }
  return null;
}

def replacePackages(file, cvtList, useAndroidX) {
  def filePath = file.toPath()
  def lines = java.nio.file.Files.readAllLines(filePath)
  def linesN = lines.size()
  def listN = cvtList.size()
  def anyChanges = false
  for (int i = 0; i < linesN; i++) {
    def line = lines.get(i)
    def needReplace = false;
    if (useAndroidX && line.contains('android.')) {
      needReplace = true
    } else if (!useAndroidX && line.contains('android')) {
      needReplace = true
    }
    if (needReplace) {
      for (int j = 0; j < listN; j++) {
        if (line.contains(cvtList[j][0])) {
          anyChanges = true
          line = line.replaceAll(cvtList[j][0], cvtList[j][1])
        }
      }
      lines.set(i, line)
    }
  }

  if (anyChanges) {
    println(" [changed] " + file)
    def fileWriter = new FileWriter(file)
    def output = new BufferedWriter(fileWriter)
    for (int i = 0; i < linesN; i++) {
      output.writeLine(lines.get(i))
    }
    output.flush()
    output.close()
    fileWriter.close()
  }

}
def replaceFiles(matchingPattern, cvtList, useAndroidX) {

  PatternFilterable patternSet = new PatternSet();
  patternSet.include(matchingPattern);

  def matchedFile = project.files(project.getProjectDir().getParentFile().toPath()).getAsFileTree().matching(patternSet)
  matchedFile.each { file ->
    if (!java.nio.file.Files.isReadable(file.toPath())) {
      return
    }

    replacePackages(file, cvtList, useAndroidX)
  }
}

android {

  // #1. Find (project)/config.xml file,
  //     because ionic capacitor does not copy <preference> nodes
  def configXmlFile = searchFileInParents("config.xml")

  if (configXmlFile == null) {
    // #2. Find (project)/app/src/main/res/xml/config.xml file,
    //     cordova should copy <preference> to this file
    configXmlFile = searchFileInParents("app/src/main/res/xml/config.xml")
  }

  if (configXmlFile == null) {
    throw new GradleException("Can not find config.xml file.")
  }

  // parse xml file
  def widget = new XmlParser().parse(configXmlFile)
  if (widget.preference == null) {
    throw new GradleException("widget is null.")
  }
  if (widget.preference.size() == 0) {
    throw new GradleException("Please add '<preference name=\"GOOGLE_MAPS_ANDROID_API_KEY\" />' to the config.xml file.")
  }
  Properties props = new Properties()
  def isKeyFound = 0

  props.setProperty("GOOGLE_MAPS_ANDROIDX_CORE_VERSION", "1.3.0");
  props.setProperty("GOOGLE_MAPS_ANDROID_SDK", "maps-sdk-3.0.0-beta");
  props.setProperty("GOOGLE_MAPS_APP_COMPAT_VERSION", "1.1.0");
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_BASEMENT_VERSION", "17.2.1");
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_BASE_VERSION", "17.2.1");
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_GCM_VERSION", "17.0.0");
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION", "16.0.0");
  props.setProperty("GOOGLE_MAPS_ANDROID_SUPPORT_V4_VERSION", "27.1.1");
  props.setProperty("GOOGLE_MAPS_PLAY_SERVICES_VERSION", "16.1.0");


  widget.preference.each { pref ->
    def name = pref.attributes().name
    def value = pref.attributes().value
    println("name = " + name);
    if (name == "GOOGLE_MAPS_ANDROID_API_KEY") {
      isKeyFound = 1
      props.setProperty(name, value)
    }
    if (name == "GOOGLE_MAPS_ANDROIDX_CORE_VERSION" ||
        name == "GOOGLE_MAPS_GOOGLE_MAPS_ANDROID_SDK" ||
        name == "GOOGLE_MAPS_APP_COMPAT_VERSION" ||
        name == "GOOGLE_MAPS_PLAY_SERVICES_BASEMENT_VERSION" ||
        name == "GOOGLE_MAPS_PLAY_SERVICES_BASE_VERSION" ||
        name == "GOOGLE_MAPS_PLAY_SERVICES_GCM_VERSION" ||
        name == "GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION"||
        name == "GOOGLE_MAPS_PLAY_SERVICES_VERSION") {
      props.setProperty(name, value)
    }
  }


  if (isKeyFound == 0) {
    throw new GradleException("Please add '<preference name=\"GOOGLE_MAPS_ANDROID_API_KEY\" />' to the config.xml file.")
  }

  def hasUseAndroidX = project.ext.has('android.useAndroidX')
  def hasEnableJetifier = project.ext.has('android.enableJetifier')
  def useAndroidX = hasUseAndroidX && hasEnableJetifier &&
          'true' == project.ext.get('android.useAndroidX') &&
          'true' == project.ext.get('android.enableJetifier')

  //-----------------------------------------------
  // Replace the source code of this plugin
  //-----------------------------------------------
  def cvtList = getConvertListe(useAndroidX)

  replaceFiles("**/plugin/google/maps/*.java", cvtList, useAndroidX)

  if (useAndroidX) {
    //----------
    // maps SDK
    //----------
    def libsDirPath = System.getProperty("user.dir")
    def libsDir = new File("${libsDirPath}/libs/")
    if (!libsDir.exists()) {
      libsDir.mkdirs()
    }

    def mapsSDK = props.getProperty("GOOGLE_MAPS_ANDROID_SDK")
    def f = new File("${libsDir.absolutePath}/${mapsSDK}.aar")
    println("---->GOOGLE_MAPS_ANDROID_SDK = " + f.absolutePath);
    if (!f.exists()) {
      new URL("https://dl.google.com/dl/geosdk/${mapsSDK}.aar").withInputStream { i ->
        f.withOutputStream {
          it << i
        }
      }
    }

    //-------------
    // dependencies
    //-------------
    def ANDROIDX_CORE_VERSION = props.getProperty("GOOGLE_MAPS_ANDROIDX_CORE_VERSION")
    def APP_COMPAT_VERSION = props.getProperty("GOOGLE_MAPS_APP_COMPAT_VERSION")
    def PLAY_SERVICES_BASEMENT_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_BASEMENT_VERSION")
    def PLAY_SERVICES_BASE_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_BASE_VERSION")
    def PLAY_SERVICES_GCM_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_GCM_VERSION")
    def PLAY_SERVICES_LOCATION_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION")

    println("---->GOOGLE_MAPS_ANDROIDX_CORE_VERSION = ${ANDROIDX_CORE_VERSION}")
    println("---->GOOGLE_MAPS_APP_COMPAT_VERSION = ${APP_COMPAT_VERSION}")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_BASEMENT_VERSION = ${PLAY_SERVICES_BASEMENT_VERSION}")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_BASE_VERSION = ${PLAY_SERVICES_BASE_VERSION}")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_GCM_VERSION = ${PLAY_SERVICES_GCM_VERSION}")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION = ${PLAY_SERVICES_LOCATION_VERSION}")
    dependencies {
      implementation name: mapsSDK, ext: 'aar'
      implementation "androidx.appcompat:appcompat:${APP_COMPAT_VERSION}"
      implementation "com.google.android.gms:play-services-basement:${PLAY_SERVICES_BASEMENT_VERSION}"
      implementation "com.google.android.gms:play-services-base:${PLAY_SERVICES_BASE_VERSION}"
      implementation "com.google.android.gms:play-services-gcm:${PLAY_SERVICES_GCM_VERSION}"
      implementation "com.google.android.gms:play-services-location:${PLAY_SERVICES_LOCATION_VERSION}"
    }
  } else {
    def PLAY_SERVICES_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_VERSION")
    def PLAY_SERVICES_LOCATION_VERSION = props.getProperty("GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION")
    def ANDROID_SUPPORT_V4_VERSION = props.getProperty("GOOGLE_MAPS_ANDROID_SUPPORT_V4_VERSION")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_VERSION = ${PLAY_SERVICES_VERSION}")
    println("---->GOOGLE_MAPS_PLAY_SERVICES_LOCATION_VERSION = ${PLAY_SERVICES_LOCATION_VERSION}")
    println("---->GOOGLE_MAPS_ANDROID_SUPPORT_V4_VERSION = ${ANDROID_SUPPORT_V4_VERSION}")
    dependencies {
      implementation "com.google.android.gms:play-services-maps:${PLAY_SERVICES_VERSION}"
      implementation "com.google.android.gms:play-services-location:${PLAY_SERVICES_LOCATION_VERSION}"
      implementation "com.android.support:support-core-utils:${ANDROID_SUPPORT_V4_VERSION}"
    }
  }


  buildTypes {
    debug {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = props.getProperty("GOOGLE_MAPS_ANDROID_API_KEY")
    }
    release {
      manifestPlaceholders.GOOGLE_MAPS_ANDROID_API_KEY = props.getProperty("GOOGLE_MAPS_ANDROID_API_KEY")
    }
  }
}
