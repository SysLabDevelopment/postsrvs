{"version":3,"sources":["webpack:///node_modules/@angular/cdk/fesm2015/drag-drop.js"],"names":["extendStyles","dest","source","key","hasOwnProperty","toggleNativeDragInteractions","element","enable","userSelect","style","touchAction","webkitUserDrag","webkitTapHighlightColor","msUserSelect","webkitUserSelect","MozUserSelect","parseCssTimeUnitsToMs","value","multiplier","toLowerCase","indexOf","parseFloat","getTransformTransitionDurationInMs","computedStyle","getComputedStyle","transitionedProperties","parseCssPropertyValue","property","find","prop","propertyIndex","rawDurations","rawDelays","name","getPropertyValue","split","map","part","trim","getMutableClientRect","clientRect","getBoundingClientRect","top","right","bottom","left","width","height","isInsideClientRect","x","y","adjustClientRect","isPointerNearClientRect","rect","threshold","pointerX","pointerY","xThreshold","yThreshold","ParentPositionTracker","_document","_viewportRuler","positions","Map","clear","elements","set","scrollPosition","getViewportScrollPosition","forEach","scrollTop","scrollLeft","event","target","cachedPosition","get","scrolledParentNode","documentElement","newTop","newLeft","viewportScrollPosition","topDifference","leftDifference","position","node","contains","deepCloneNode","clone","cloneNode","descendantsWithId","querySelectorAll","nodeName","removeAttribute","i","length","transferCanvasData","transferInputData","transferData","selector","callback","descendantElements","cloneElements","context","getContext","drawImage","_a","passiveEventListenerOptions","passive","activeEventListenerOptions","MOUSE_EVENT_IGNORE_TIME","DragRef","_config","_ngZone","_dragDropRegistry","_passiveTransform","_activeTransform","_moveEvents","_pointerMoveSubscription","EMPTY","_pointerUpSubscription","_scrollSubscription","_resizeSubscription","_boundaryElement","_nativeInteractionsEnabled","_handles","_disabledHandles","Set","_direction","dragStartDelay","_disabled","beforeStarted","started","released","ended","entered","exited","dropped","moved","asObservable","_pointerDown","next","targetHandle","handle","has","disabled","_initializeDragSequence","_rootElement","_pointerMove","preventDefault","pointerPosition","_getPointerPositionOnPage","_hasStartedDragging","distanceX","Math","abs","_pickupPositionOnPage","distanceY","isOverThreshold","dragStartThreshold","isDelayElapsed","Date","now","_dragStartTime","_getDragStartDelay","_endDragSequence","_dropContainer","isDragging","run","_startDragSequence","_previewRect","_preview","constrainedPointerPosition","_getConstrainedPointerPosition","_hasMoved","_lastKnownPointerPosition","_updatePointerDirectionDelta","_updateActiveDropContainer","activeTransform","_applyRootElementTransform","SVGElement","appliedTransform","setAttribute","observers","distance","_getDragDistance","delta","_pointerDirectionDelta","_pointerUp","withRootElement","_parentPositions","registerDragItem","_placeholder","getPlaceholderElement","getRootElement","handles","_toggleNativeDragInteractions","template","_previewTemplate","_placeholderTemplate","rootElement","_removeRootElementListeners","runOutsideAngular","addEventListener","_initialTransform","undefined","_ownerSVGElement","ownerSVGElement","boundaryElement","unsubscribe","change","subscribe","_containInsideBoundaryOnResize","removeNode","_anchor","_destroyPreview","_destroyPlaceholder","removeDragItem","_removeSubscriptions","complete","transform","add","direction","container","_previewRef","destroy","_placeholderRef","stopDragging","_rootElementTapHighlight","_stopScrolling","_animatePreviewToPlaceholder","then","_cleanupDragArtifacts","_cleanupCachedDimensions","isTouchEvent","_lastTouchEventTime","dropContainer","parent","parentNode","preview","_createPreviewElement","placeholder","_createPlaceholderElement","anchor","createComment","insertBefore","display","body","appendChild","replaceChild","getPreviewInsertionPoint","start","_initialContainer","_initialIndex","getItemIndex","cache","getScrollableParents","referenceElement","stopPropagation","isTouchSequence","isAuxiliaryMouseButton","button","isSyntheticEvent","draggable","type","pointerMove","pointerUp","scroll","scrollEvent","_updateOnScroll","_boundaryRect","previewTemplate","_pickupPositionInElement","matchSize","_getPointerPositionInElement","_pointerPositionAtLastDirectionChange","startDragging","currentIndex","isPointerOverContainer","_isOverContainer","item","previousIndex","previousContainer","drop","rawX","rawY","newContainer","_getSiblingContainerFromPosition","exit","enter","sortingDisabled","_startScrollingIfNecessary","_sortItem","getTransform","previewConfig","previewClass","rootRect","viewRef","viewContainer","createEmbeddedView","detectChanges","getRootNode","matchElementSize","pointerEvents","margin","zIndex","classList","Array","isArray","className","Promise","resolve","placeholderRect","duration","handler","propertyName","removeEventListener","clearTimeout","timeout","setTimeout","placeholderConfig","placeholderTemplate","elementRect","handleElement","referenceRect","point","targetTouches","_getViewportScrollPosition","pageX","pageY","touches","changedTouches","svgMatrix","getScreenCTM","svgPoint","createSVGPoint","matrixTransform","inverse","dropContainerLock","lockAxis","constrainPosition","pickupX","pickupY","boundaryRect","previewRect","minY","maxY","minX","maxX","clamp","pointerPositionOnPage","positionSinceLastChange","changeX","changeY","pointerDirectionChangeThreshold","shouldEnable","currentPosition","pickupPosition","leftOverflow","rightOverflow","topOverflow","bottomOverflow","setFreeDragPosition","touch","mouse","scrollDifference","handleScroll","newValue","round","min","max","removeChild","documentRef","fullscreenElement","webkitFullscreenElement","mozFullScreenElement","msFullscreenElement","rootNodes","nodeType","ELEMENT_NODE","wrapper","createElement","sourceRect","moveItemInArray","array","fromIndex","toIndex","from","clamp$1","to","transferArrayItem","currentArray","targetArray","targetIndex","splice","copyArrayItem","DROP_PROXIMITY_THRESHOLD","SCROLL_PROXIMITY_THRESHOLD","AUTO_SCROLL_STEP","DropListRef","autoScrollDisabled","enterPredicate","sorted","_isDragging","_itemPositions","_previousSwap","drag","overlaps","_siblings","_orientation","_activeSiblings","_viewportScrollSubscription","_verticalScrollDirection","_horizontalScrollDirection","_stopScrollTimers","_cachedShadowRoot","_startScrollInterval","pipe","_scrollNode","incrementVerticalScroll","incrementHorizontalScroll","withScrollableParents","registerDropContainer","removeDropContainer","styles","_initialScrollSnap","msScrollSnapType","scrollSnapType","_cacheItems","sibling","_startReceiving","_listenToScrollEvents","index","newIndex","_draggables","_getItemIndexFromPointerPosition","activeDraggables","_activeDraggables","newPositionReference","parentElement","_shouldEnterAsFirstChild","reference","unshift","push","_cacheItemPositions","_cacheParentPositions","_reset","items","previousItems","_withDropContainer","draggedItems","filter","every","connectedTo","slice","orientation","_scrollableElements","reverse","findIndex","currentItem","size","pointerDelta","_clientRect","siblings","isHorizontal","siblingAtNewPosition","newPosition","itemOffset","_getItemOffsetPx","siblingOffset","_getSiblingOffsetPx","oldOrder","isDraggedItem","offset","elementToOffset","scrollNode","verticalScrollDirection","horizontalScrollDirection","getElementScrollDirections","getViewportSize","getVerticalScrollDirection","getHorizontalScrollDirection","window","elementToMeasure","getVisibleElement","sort","a","b","_stopReceiving","immediateSibling","end","itemPositions","reversed","lastItemRect","firstItemRect","_","floor","_canReceive","elementFromPoint","_getShadowRoot","nativeElement","activeSiblings","_sortFromLastPointerPosition","isReceiving","shadowRoot","predicate","amount","scrollBy","computedVertical","computedHorizontal","scrollHeight","clientHeight","scrollWidth","clientWidth","activeCapturingEventOptions","capture","DragDropRegistry","_dropInstances","_dragInstances","_activeDragInstances","_globalListeners","_preventDefaultWhileDragging","startsWith","moveEvent","upEvent","e","options","config","_clearGlobalListeners","instance","ɵfac","DragDropRegistry_Factory","t","ɵprov","factory","token","providedIn","ctorParameters","decorators","args","DEFAULT_CONFIG","DragDrop","DragDrop_Factory","CDK_DROP_LIST_GROUP","CdkDropListGroup","_items","CdkDropListGroup_Factory","ɵdir","selectors","inputs","exportAs","features","provide","useExisting","propDecorators","providers","CDK_DRAG_CONFIG","_uniqueIdCounter","CDK_DROP_LIST","ɵ0","CdkDropList","dragDrop","_changeDetectorRef","_dir","_group","_scrollDispatcher","_destroyed","id","_unsortedItems","_dropListRef","createDropList","data","_assignDefaults","_setupInputSyncSubscription","_handleEvents","_dropLists","_syncItemsWithRef","documentPosition","_dragRef","compareDocumentPosition","Node","DOCUMENT_POSITION_FOLLOWING","dispose","ref","withDirection","correspondingDropList","list","console","warn","_scrollableParentsResolved","scrollableParents","getAncestorScrollContainers","scrollable","getElementRef","withOrientation","markForCheck","emit","draggingDisabled","listAutoScrollDisabled","listOrientation","withItems","getSortedItems","CdkDropList_Factory","hostAttrs","hostVars","hostBindings","CdkDropList_HostBindings","rf","ctx","outputs","useValue","host","CDK_DRAG_PARENT","CDK_DRAG_HANDLE","CdkDragHandle","parentDrag","_stateChanges","_parentDrag","CdkDragHandle_Factory","CDK_DRAG_PLACEHOLDER","CdkDragPlaceholder","templateRef","CdkDragPlaceholder_Factory","CDK_DRAG_PREVIEW","CdkDragPreview","_matchSize","CdkDragPreview_Factory","CdkDrag","_viewContainerRef","_selfHandle","observer","subscription","movedEvent","createDrag","addItem","_syncInputs","reset","getFreeDragPosition","onStable","_updateRootElement","changes","childHandleElements","rootElementSelector","withHandles","handleInstance","dragRef","disableHandle","enableHandle","freeDragPosition","rootSelectorChange","positionChange","firstChange","removeItem","getClosestMatchingAncestor","Error","boundary","dir","withBoundaryElement","_getBoundaryElement","withPlaceholderTemplate","withPreviewTemplate","CdkDrag_Factory","contentQueries","CdkDrag_ContentQueries","dirIndex","_t","first","CdkDrag_HostBindings","descendants","currentElement","matches","msMatchesSelector","DragDropModule","ɵmod","ɵinj","DragDropModule_Factory","imports","ngJitMode","declarations","exports"],"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","file":"default~pages-courier-courier-module~pages-test-test-module-es5.js","sourcesContent":["import { ɵɵdefineInjectable, ɵɵinject, NgZone, Injectable, Inject, InjectionToken, Directive, Input, EventEmitter, isDevMode, ElementRef, ChangeDetectorRef, Optional, SkipSelf, Output, TemplateRef, ViewContainerRef, Self, ContentChildren, ContentChild, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\nimport { ViewportRuler, ScrollDispatcher, CdkScrollableModule } from '@angular/cdk/scrolling';\nimport { normalizePassiveListenerOptions, _getShadowRoot } from '@angular/cdk/platform';\nimport { coerceBooleanProperty, coerceElement, coerceArray, coerceNumberProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription, interval, animationFrameScheduler, Observable, merge } from 'rxjs';\nimport { takeUntil, startWith, map, take, tap, switchMap } from 'rxjs/operators';\nimport { Directionality } from '@angular/cdk/bidi';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Shallow-extends a stylesheet object with another stylesheet object.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction extendStyles(dest, source) {\n    for (let key in source) {\n        if (source.hasOwnProperty(key)) {\n            dest[key] = source[key];\n        }\n    }\n    return dest;\n}\n/**\n * Toggles whether the native drag interactions should be enabled for an element.\n * @param element Element on which to toggle the drag interactions.\n * @param enable Whether the drag interactions should be enabled.\n * @docs-private\n */\nfunction toggleNativeDragInteractions(element, enable) {\n    const userSelect = enable ? '' : 'none';\n    extendStyles(element.style, {\n        touchAction: enable ? '' : 'none',\n        webkitUserDrag: enable ? '' : 'none',\n        webkitTapHighlightColor: enable ? '' : 'transparent',\n        userSelect: userSelect,\n        msUserSelect: userSelect,\n        webkitUserSelect: userSelect,\n        MozUserSelect: userSelect\n    });\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Parses a CSS time value to milliseconds. */\nfunction parseCssTimeUnitsToMs(value) {\n    // Some browsers will return it in seconds, whereas others will return milliseconds.\n    const multiplier = value.toLowerCase().indexOf('ms') > -1 ? 1 : 1000;\n    return parseFloat(value) * multiplier;\n}\n/** Gets the transform transition duration, including the delay, of an element in milliseconds. */\nfunction getTransformTransitionDurationInMs(element) {\n    const computedStyle = getComputedStyle(element);\n    const transitionedProperties = parseCssPropertyValue(computedStyle, 'transition-property');\n    const property = transitionedProperties.find(prop => prop === 'transform' || prop === 'all');\n    // If there's no transition for `all` or `transform`, we shouldn't do anything.\n    if (!property) {\n        return 0;\n    }\n    // Get the index of the property that we're interested in and match\n    // it up to the same index in `transition-delay` and `transition-duration`.\n    const propertyIndex = transitionedProperties.indexOf(property);\n    const rawDurations = parseCssPropertyValue(computedStyle, 'transition-duration');\n    const rawDelays = parseCssPropertyValue(computedStyle, 'transition-delay');\n    return parseCssTimeUnitsToMs(rawDurations[propertyIndex]) +\n        parseCssTimeUnitsToMs(rawDelays[propertyIndex]);\n}\n/** Parses out multiple values from a computed style into an array. */\nfunction parseCssPropertyValue(computedStyle, name) {\n    const value = computedStyle.getPropertyValue(name);\n    return value.split(',').map(part => part.trim());\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Gets a mutable version of an element's bounding `ClientRect`. */\nfunction getMutableClientRect(element) {\n    const clientRect = element.getBoundingClientRect();\n    // We need to clone the `clientRect` here, because all the values on it are readonly\n    // and we need to be able to update them. Also we can't use a spread here, because\n    // the values on a `ClientRect` aren't own properties. See:\n    // https://developer.mozilla.org/en-US/docs/Web/API/Element/getBoundingClientRect#Notes\n    return {\n        top: clientRect.top,\n        right: clientRect.right,\n        bottom: clientRect.bottom,\n        left: clientRect.left,\n        width: clientRect.width,\n        height: clientRect.height\n    };\n}\n/**\n * Checks whether some coordinates are within a `ClientRect`.\n * @param clientRect ClientRect that is being checked.\n * @param x Coordinates along the X axis.\n * @param y Coordinates along the Y axis.\n */\nfunction isInsideClientRect(clientRect, x, y) {\n    const { top, bottom, left, right } = clientRect;\n    return y >= top && y <= bottom && x >= left && x <= right;\n}\n/**\n * Updates the top/left positions of a `ClientRect`, as well as their bottom/right counterparts.\n * @param clientRect `ClientRect` that should be updated.\n * @param top Amount to add to the `top` position.\n * @param left Amount to add to the `left` position.\n */\nfunction adjustClientRect(clientRect, top, left) {\n    clientRect.top += top;\n    clientRect.bottom = clientRect.top + clientRect.height;\n    clientRect.left += left;\n    clientRect.right = clientRect.left + clientRect.width;\n}\n/**\n * Checks whether the pointer coordinates are close to a ClientRect.\n * @param rect ClientRect to check against.\n * @param threshold Threshold around the ClientRect.\n * @param pointerX Coordinates along the X axis.\n * @param pointerY Coordinates along the Y axis.\n */\nfunction isPointerNearClientRect(rect, threshold, pointerX, pointerY) {\n    const { top, right, bottom, left, width, height } = rect;\n    const xThreshold = width * threshold;\n    const yThreshold = height * threshold;\n    return pointerY > top - yThreshold && pointerY < bottom + yThreshold &&\n        pointerX > left - xThreshold && pointerX < right + xThreshold;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Keeps track of the scroll position and dimensions of the parents of an element. */\nclass ParentPositionTracker {\n    constructor(_document, _viewportRuler) {\n        this._document = _document;\n        this._viewportRuler = _viewportRuler;\n        /** Cached positions of the scrollable parent elements. */\n        this.positions = new Map();\n    }\n    /** Clears the cached positions. */\n    clear() {\n        this.positions.clear();\n    }\n    /** Caches the positions. Should be called at the beginning of a drag sequence. */\n    cache(elements) {\n        this.clear();\n        this.positions.set(this._document, {\n            scrollPosition: this._viewportRuler.getViewportScrollPosition(),\n        });\n        elements.forEach(element => {\n            this.positions.set(element, {\n                scrollPosition: { top: element.scrollTop, left: element.scrollLeft },\n                clientRect: getMutableClientRect(element)\n            });\n        });\n    }\n    /** Handles scrolling while a drag is taking place. */\n    handleScroll(event) {\n        const target = event.target;\n        const cachedPosition = this.positions.get(target);\n        if (!cachedPosition) {\n            return null;\n        }\n        // Used when figuring out whether an element is inside the scroll parent. If the scrolled\n        // parent is the `document`, we use the `documentElement`, because IE doesn't support\n        // `contains` on the `document`.\n        const scrolledParentNode = target === this._document ? target.documentElement : target;\n        const scrollPosition = cachedPosition.scrollPosition;\n        let newTop;\n        let newLeft;\n        if (target === this._document) {\n            const viewportScrollPosition = this._viewportRuler.getViewportScrollPosition();\n            newTop = viewportScrollPosition.top;\n            newLeft = viewportScrollPosition.left;\n        }\n        else {\n            newTop = target.scrollTop;\n            newLeft = target.scrollLeft;\n        }\n        const topDifference = scrollPosition.top - newTop;\n        const leftDifference = scrollPosition.left - newLeft;\n        // Go through and update the cached positions of the scroll\n        // parents that are inside the element that was scrolled.\n        this.positions.forEach((position, node) => {\n            if (position.clientRect && target !== node && scrolledParentNode.contains(node)) {\n                adjustClientRect(position.clientRect, topDifference, leftDifference);\n            }\n        });\n        scrollPosition.top = newTop;\n        scrollPosition.left = newLeft;\n        return { top: topDifference, left: leftDifference };\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Creates a deep clone of an element. */\nfunction deepCloneNode(node) {\n    const clone = node.cloneNode(true);\n    const descendantsWithId = clone.querySelectorAll('[id]');\n    const nodeName = node.nodeName.toLowerCase();\n    // Remove the `id` to avoid having multiple elements with the same id on the page.\n    clone.removeAttribute('id');\n    for (let i = 0; i < descendantsWithId.length; i++) {\n        descendantsWithId[i].removeAttribute('id');\n    }\n    if (nodeName === 'canvas') {\n        transferCanvasData(node, clone);\n    }\n    else if (nodeName === 'input' || nodeName === 'select' || nodeName === 'textarea') {\n        transferInputData(node, clone);\n    }\n    transferData('canvas', node, clone, transferCanvasData);\n    transferData('input, textarea, select', node, clone, transferInputData);\n    return clone;\n}\n/** Matches elements between an element and its clone and allows for their data to be cloned. */\nfunction transferData(selector, node, clone, callback) {\n    const descendantElements = node.querySelectorAll(selector);\n    if (descendantElements.length) {\n        const cloneElements = clone.querySelectorAll(selector);\n        for (let i = 0; i < descendantElements.length; i++) {\n            callback(descendantElements[i], cloneElements[i]);\n        }\n    }\n}\n/** Transfers the data of one input element to another. */\nfunction transferInputData(source, clone) {\n    clone.value = source.value;\n}\n/** Transfers the data of one canvas element to another. */\nfunction transferCanvasData(source, clone) {\n    const context = clone.getContext('2d');\n    if (context) {\n        // In some cases `drawImage` can throw (e.g. if the canvas size is 0x0).\n        // We can't do much about it so just ignore the error.\n        try {\n            context.drawImage(source, 0, 0);\n        }\n        catch (_a) { }\n    }\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Options that can be used to bind a passive event listener. */\nconst passiveEventListenerOptions = normalizePassiveListenerOptions({ passive: true });\n/** Options that can be used to bind an active event listener. */\nconst activeEventListenerOptions = normalizePassiveListenerOptions({ passive: false });\n/**\n * Time in milliseconds for which to ignore mouse events, after\n * receiving a touch event. Used to avoid doing double work for\n * touch devices where the browser fires fake mouse events, in\n * addition to touch events.\n */\nconst MOUSE_EVENT_IGNORE_TIME = 800;\n/**\n * Reference to a draggable item. Used to manipulate or dispose of the item.\n */\nclass DragRef {\n    constructor(element, _config, _document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._config = _config;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n        /**\n         * CSS `transform` applied to the element when it isn't being dragged. We need a\n         * passive transform in order for the dragged element to retain its new position\n         * after the user has stopped dragging and because we need to know the relative\n         * position in case they start dragging again. This corresponds to `element.style.transform`.\n         */\n        this._passiveTransform = { x: 0, y: 0 };\n        /** CSS `transform` that is applied to the element while it's being dragged. */\n        this._activeTransform = { x: 0, y: 0 };\n        /** Emits when the item is being moved. */\n        this._moveEvents = new Subject();\n        /** Subscription to pointer movement events. */\n        this._pointerMoveSubscription = Subscription.EMPTY;\n        /** Subscription to the event that is dispatched when the user lifts their pointer. */\n        this._pointerUpSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being scrolled. */\n        this._scrollSubscription = Subscription.EMPTY;\n        /** Subscription to the viewport being resized. */\n        this._resizeSubscription = Subscription.EMPTY;\n        /** Cached reference to the boundary element. */\n        this._boundaryElement = null;\n        /** Whether the native dragging interactions have been enabled on the root element. */\n        this._nativeInteractionsEnabled = true;\n        /** Elements that can be used to drag the draggable item. */\n        this._handles = [];\n        /** Registered handles that are currently disabled. */\n        this._disabledHandles = new Set();\n        /** Layout direction of the item. */\n        this._direction = 'ltr';\n        /**\n         * Amount of milliseconds to wait after the user has put their\n         * pointer down before starting to drag the element.\n         */\n        this.dragStartDelay = 0;\n        this._disabled = false;\n        /** Emits as the drag sequence is being prepared. */\n        this.beforeStarted = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new Subject();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new Subject();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new Subject();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new Subject();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new Subject();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new Subject();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = this._moveEvents.asObservable();\n        /** Handler for the `mousedown`/`touchstart` events. */\n        this._pointerDown = (event) => {\n            this.beforeStarted.next();\n            // Delegate the event based on whether it started from a handle or the element itself.\n            if (this._handles.length) {\n                const targetHandle = this._handles.find(handle => {\n                    const target = event.target;\n                    return !!target && (target === handle || handle.contains(target));\n                });\n                if (targetHandle && !this._disabledHandles.has(targetHandle) && !this.disabled) {\n                    this._initializeDragSequence(targetHandle, event);\n                }\n            }\n            else if (!this.disabled) {\n                this._initializeDragSequence(this._rootElement, event);\n            }\n        };\n        /** Handler that is invoked when the user moves their pointer after they've initiated a drag. */\n        this._pointerMove = (event) => {\n            // Prevent the default action as early as possible in order to block\n            // native actions like dragging the selected text or images with the mouse.\n            event.preventDefault();\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            if (!this._hasStartedDragging) {\n                const distanceX = Math.abs(pointerPosition.x - this._pickupPositionOnPage.x);\n                const distanceY = Math.abs(pointerPosition.y - this._pickupPositionOnPage.y);\n                const isOverThreshold = distanceX + distanceY >= this._config.dragStartThreshold;\n                // Only start dragging after the user has moved more than the minimum distance in either\n                // direction. Note that this is preferrable over doing something like `skip(minimumDistance)`\n                // in the `pointerMove` subscription, because we're not guaranteed to have one move event\n                // per pixel of movement (e.g. if the user moves their pointer quickly).\n                if (isOverThreshold) {\n                    const isDelayElapsed = Date.now() >= this._dragStartTime + this._getDragStartDelay(event);\n                    if (!isDelayElapsed) {\n                        this._endDragSequence(event);\n                        return;\n                    }\n                    // Prevent other drag sequences from starting while something in the container is still\n                    // being dragged. This can happen while we're waiting for the drop animation to finish\n                    // and can cause errors, because some elements might still be moving around.\n                    if (!this._dropContainer || !this._dropContainer.isDragging()) {\n                        this._hasStartedDragging = true;\n                        this._ngZone.run(() => this._startDragSequence(event));\n                    }\n                }\n                return;\n            }\n            // We only need the preview dimensions if we have a boundary element.\n            if (this._boundaryElement) {\n                // Cache the preview element rect if we haven't cached it already or if\n                // we cached it too early before the element dimensions were computed.\n                if (!this._previewRect || (!this._previewRect.width && !this._previewRect.height)) {\n                    this._previewRect = (this._preview || this._rootElement).getBoundingClientRect();\n                }\n            }\n            const constrainedPointerPosition = this._getConstrainedPointerPosition(pointerPosition);\n            this._hasMoved = true;\n            this._lastKnownPointerPosition = pointerPosition;\n            this._updatePointerDirectionDelta(constrainedPointerPosition);\n            if (this._dropContainer) {\n                this._updateActiveDropContainer(constrainedPointerPosition, pointerPosition);\n            }\n            else {\n                const activeTransform = this._activeTransform;\n                activeTransform.x =\n                    constrainedPointerPosition.x - this._pickupPositionOnPage.x + this._passiveTransform.x;\n                activeTransform.y =\n                    constrainedPointerPosition.y - this._pickupPositionOnPage.y + this._passiveTransform.y;\n                this._applyRootElementTransform(activeTransform.x, activeTransform.y);\n                // Apply transform as attribute if dragging and svg element to work for IE\n                if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n                    const appliedTransform = `translate(${activeTransform.x} ${activeTransform.y})`;\n                    this._rootElement.setAttribute('transform', appliedTransform);\n                }\n            }\n            // Since this event gets fired for every pixel while dragging, we only\n            // want to fire it if the consumer opted into it. Also we have to\n            // re-enter the zone because we run all of the events on the outside.\n            if (this._moveEvents.observers.length) {\n                this._ngZone.run(() => {\n                    this._moveEvents.next({\n                        source: this,\n                        pointerPosition: constrainedPointerPosition,\n                        event,\n                        distance: this._getDragDistance(constrainedPointerPosition),\n                        delta: this._pointerDirectionDelta\n                    });\n                });\n            }\n        };\n        /** Handler that is invoked when the user lifts their pointer up, after initiating a drag. */\n        this._pointerUp = (event) => {\n            this._endDragSequence(event);\n        };\n        this.withRootElement(element);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n        _dragDropRegistry.registerDragItem(this);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || !!(this._dropContainer && this._dropContainer.disabled);\n    }\n    set disabled(value) {\n        const newValue = coerceBooleanProperty(value);\n        if (newValue !== this._disabled) {\n            this._disabled = newValue;\n            this._toggleNativeDragInteractions();\n        }\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._placeholder;\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._rootElement;\n    }\n    /**\n     * Gets the currently-visible element that represents the drag item.\n     * While dragging this is the placeholder, otherwise it's the root element.\n     */\n    getVisibleElement() {\n        return this.isDragging() ? this.getPlaceholderElement() : this.getRootElement();\n    }\n    /** Registers the handles that can be used to drag the element. */\n    withHandles(handles) {\n        this._handles = handles.map(handle => coerceElement(handle));\n        this._handles.forEach(handle => toggleNativeDragInteractions(handle, false));\n        this._toggleNativeDragInteractions();\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag preview.\n     * @param template Template that from which to stamp out the preview.\n     */\n    withPreviewTemplate(template) {\n        this._previewTemplate = template;\n        return this;\n    }\n    /**\n     * Registers the template that should be used for the drag placeholder.\n     * @param template Template that from which to stamp out the placeholder.\n     */\n    withPlaceholderTemplate(template) {\n        this._placeholderTemplate = template;\n        return this;\n    }\n    /**\n     * Sets an alternate drag root element. The root element is the element that will be moved as\n     * the user is dragging. Passing an alternate root element is useful when trying to enable\n     * dragging on an element that you might not have access to.\n     */\n    withRootElement(rootElement) {\n        const element = coerceElement(rootElement);\n        if (element !== this._rootElement) {\n            if (this._rootElement) {\n                this._removeRootElementListeners(this._rootElement);\n            }\n            this._ngZone.runOutsideAngular(() => {\n                element.addEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n                element.addEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n            });\n            this._initialTransform = undefined;\n            this._rootElement = element;\n        }\n        if (typeof SVGElement !== 'undefined' && this._rootElement instanceof SVGElement) {\n            this._ownerSVGElement = this._rootElement.ownerSVGElement;\n        }\n        return this;\n    }\n    /**\n     * Element to which the draggable's position will be constrained.\n     */\n    withBoundaryElement(boundaryElement) {\n        this._boundaryElement = boundaryElement ? coerceElement(boundaryElement) : null;\n        this._resizeSubscription.unsubscribe();\n        if (boundaryElement) {\n            this._resizeSubscription = this._viewportRuler\n                .change(10)\n                .subscribe(() => this._containInsideBoundaryOnResize());\n        }\n        return this;\n    }\n    /** Removes the dragging functionality from the DOM element. */\n    dispose() {\n        this._removeRootElementListeners(this._rootElement);\n        // Do this check before removing from the registry since it'll\n        // stop being considered as dragged once it is removed.\n        if (this.isDragging()) {\n            // Since we move out the element to the end of the body while it's being\n            // dragged, we have to make sure that it's removed if it gets destroyed.\n            removeNode(this._rootElement);\n        }\n        removeNode(this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._dragDropRegistry.removeDragItem(this);\n        this._removeSubscriptions();\n        this.beforeStarted.complete();\n        this.started.complete();\n        this.released.complete();\n        this.ended.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this._moveEvents.complete();\n        this._handles = [];\n        this._disabledHandles.clear();\n        this._dropContainer = undefined;\n        this._resizeSubscription.unsubscribe();\n        this._parentPositions.clear();\n        this._boundaryElement = this._rootElement = this._ownerSVGElement = this._placeholderTemplate =\n            this._previewTemplate = this._anchor = null;\n    }\n    /** Checks whether the element is currently being dragged. */\n    isDragging() {\n        return this._hasStartedDragging && this._dragDropRegistry.isDragging(this);\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._rootElement.style.transform = this._initialTransform || '';\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform = { x: 0, y: 0 };\n    }\n    /**\n     * Sets a handle as disabled. While a handle is disabled, it'll capture and interrupt dragging.\n     * @param handle Handle element that should be disabled.\n     */\n    disableHandle(handle) {\n        if (this._handles.indexOf(handle) > -1) {\n            this._disabledHandles.add(handle);\n        }\n    }\n    /**\n     * Enables a handle, if it has been disabled.\n     * @param handle Handle element to be enabled.\n     */\n    enableHandle(handle) {\n        this._disabledHandles.delete(handle);\n    }\n    /** Sets the layout direction of the draggable item. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /** Sets the container that the item is part of. */\n    _withDropContainer(container) {\n        this._dropContainer = container;\n    }\n    /**\n     * Gets the current position in pixels the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        const position = this.isDragging() ? this._activeTransform : this._passiveTransform;\n        return { x: position.x, y: position.y };\n    }\n    /**\n     * Sets the current position in pixels the draggable outside of a drop container.\n     * @param value New position to be set.\n     */\n    setFreeDragPosition(value) {\n        this._activeTransform = { x: 0, y: 0 };\n        this._passiveTransform.x = value.x;\n        this._passiveTransform.y = value.y;\n        if (!this._dropContainer) {\n            this._applyRootElementTransform(value.x, value.y);\n        }\n        return this;\n    }\n    /** Updates the item's sort order based on the last-known pointer position. */\n    _sortFromLastPointerPosition() {\n        const position = this._lastKnownPointerPosition;\n        if (position && this._dropContainer) {\n            this._updateActiveDropContainer(this._getConstrainedPointerPosition(position), position);\n        }\n    }\n    /** Unsubscribes from the global subscriptions. */\n    _removeSubscriptions() {\n        this._pointerMoveSubscription.unsubscribe();\n        this._pointerUpSubscription.unsubscribe();\n        this._scrollSubscription.unsubscribe();\n    }\n    /** Destroys the preview element and its ViewRef. */\n    _destroyPreview() {\n        if (this._preview) {\n            removeNode(this._preview);\n        }\n        if (this._previewRef) {\n            this._previewRef.destroy();\n        }\n        this._preview = this._previewRef = null;\n    }\n    /** Destroys the placeholder element and its ViewRef. */\n    _destroyPlaceholder() {\n        if (this._placeholder) {\n            removeNode(this._placeholder);\n        }\n        if (this._placeholderRef) {\n            this._placeholderRef.destroy();\n        }\n        this._placeholder = this._placeholderRef = null;\n    }\n    /**\n     * Clears subscriptions and stops the dragging sequence.\n     * @param event Browser event object that ended the sequence.\n     */\n    _endDragSequence(event) {\n        // Note that here we use `isDragging` from the service, rather than from `this`.\n        // The difference is that the one from the service reflects whether a dragging sequence\n        // has been initiated, whereas the one on `this` includes whether the user has passed\n        // the minimum dragging threshold.\n        if (!this._dragDropRegistry.isDragging(this)) {\n            return;\n        }\n        this._removeSubscriptions();\n        this._dragDropRegistry.stopDragging(this);\n        this._toggleNativeDragInteractions();\n        if (this._handles) {\n            this._rootElement.style.webkitTapHighlightColor = this._rootElementTapHighlight;\n        }\n        if (!this._hasStartedDragging) {\n            return;\n        }\n        this.released.next({ source: this });\n        if (this._dropContainer) {\n            // Stop scrolling immediately, instead of waiting for the animation to finish.\n            this._dropContainer._stopScrolling();\n            this._animatePreviewToPlaceholder().then(() => {\n                this._cleanupDragArtifacts(event);\n                this._cleanupCachedDimensions();\n                this._dragDropRegistry.stopDragging(this);\n            });\n        }\n        else {\n            // Convert the active transform into a passive one. This means that next time\n            // the user starts dragging the item, its position will be calculated relatively\n            // to the new passive transform.\n            this._passiveTransform.x = this._activeTransform.x;\n            this._passiveTransform.y = this._activeTransform.y;\n            this._ngZone.run(() => {\n                this.ended.next({\n                    source: this,\n                    distance: this._getDragDistance(this._getPointerPositionOnPage(event))\n                });\n            });\n            this._cleanupCachedDimensions();\n            this._dragDropRegistry.stopDragging(this);\n        }\n    }\n    /** Starts the dragging sequence. */\n    _startDragSequence(event) {\n        if (isTouchEvent(event)) {\n            this._lastTouchEventTime = Date.now();\n        }\n        this._toggleNativeDragInteractions();\n        const dropContainer = this._dropContainer;\n        if (dropContainer) {\n            const element = this._rootElement;\n            const parent = element.parentNode;\n            const preview = this._preview = this._createPreviewElement();\n            const placeholder = this._placeholder = this._createPlaceholderElement();\n            const anchor = this._anchor = this._anchor || this._document.createComment('');\n            // Insert an anchor node so that we can restore the element's position in the DOM.\n            parent.insertBefore(anchor, element);\n            // We move the element out at the end of the body and we make it hidden, because keeping it in\n            // place will throw off the consumer's `:last-child` selectors. We can't remove the element\n            // from the DOM completely, because iOS will stop firing all subsequent events in the chain.\n            element.style.display = 'none';\n            this._document.body.appendChild(parent.replaceChild(placeholder, element));\n            getPreviewInsertionPoint(this._document).appendChild(preview);\n            this.started.next({ source: this }); // Emit before notifying the container.\n            dropContainer.start();\n            this._initialContainer = dropContainer;\n            this._initialIndex = dropContainer.getItemIndex(this);\n        }\n        else {\n            this.started.next({ source: this });\n            this._initialContainer = this._initialIndex = undefined;\n        }\n        // Important to run after we've called `start` on the parent container\n        // so that it has had time to resolve its scrollable parents.\n        this._parentPositions.cache(dropContainer ? dropContainer.getScrollableParents() : []);\n    }\n    /**\n     * Sets up the different variables and subscriptions\n     * that will be necessary for the dragging sequence.\n     * @param referenceElement Element that started the drag sequence.\n     * @param event Browser event object that started the sequence.\n     */\n    _initializeDragSequence(referenceElement, event) {\n        // Always stop propagation for the event that initializes\n        // the dragging sequence, in order to prevent it from potentially\n        // starting another sequence for a draggable parent somewhere up the DOM tree.\n        event.stopPropagation();\n        const isDragging = this.isDragging();\n        const isTouchSequence = isTouchEvent(event);\n        const isAuxiliaryMouseButton = !isTouchSequence && event.button !== 0;\n        const rootElement = this._rootElement;\n        const isSyntheticEvent = !isTouchSequence && this._lastTouchEventTime &&\n            this._lastTouchEventTime + MOUSE_EVENT_IGNORE_TIME > Date.now();\n        // If the event started from an element with the native HTML drag&drop, it'll interfere\n        // with our own dragging (e.g. `img` tags do it by default). Prevent the default action\n        // to stop it from happening. Note that preventing on `dragstart` also seems to work, but\n        // it's flaky and it fails if the user drags it away quickly. Also note that we only want\n        // to do this for `mousedown` since doing the same for `touchstart` will stop any `click`\n        // events from firing on touch devices.\n        if (event.target && event.target.draggable && event.type === 'mousedown') {\n            event.preventDefault();\n        }\n        // Abort if the user is already dragging or is using a mouse button other than the primary one.\n        if (isDragging || isAuxiliaryMouseButton || isSyntheticEvent) {\n            return;\n        }\n        // If we've got handles, we need to disable the tap highlight on the entire root element,\n        // otherwise iOS will still add it, even though all the drag interactions on the handle\n        // are disabled.\n        if (this._handles.length) {\n            this._rootElementTapHighlight = rootElement.style.webkitTapHighlightColor || '';\n            rootElement.style.webkitTapHighlightColor = 'transparent';\n        }\n        this._hasStartedDragging = this._hasMoved = false;\n        // Avoid multiple subscriptions and memory leaks when multi touch\n        // (isDragging check above isn't enough because of possible temporal and/or dimensional delays)\n        this._removeSubscriptions();\n        this._pointerMoveSubscription = this._dragDropRegistry.pointerMove.subscribe(this._pointerMove);\n        this._pointerUpSubscription = this._dragDropRegistry.pointerUp.subscribe(this._pointerUp);\n        this._scrollSubscription = this._dragDropRegistry.scroll.subscribe(scrollEvent => {\n            this._updateOnScroll(scrollEvent);\n        });\n        if (this._boundaryElement) {\n            this._boundaryRect = getMutableClientRect(this._boundaryElement);\n        }\n        // If we have a custom preview we can't know ahead of time how large it'll be so we position\n        // it next to the cursor. The exception is when the consumer has opted into making the preview\n        // the same size as the root element, in which case we do know the size.\n        const previewTemplate = this._previewTemplate;\n        this._pickupPositionInElement = previewTemplate && previewTemplate.template &&\n            !previewTemplate.matchSize ? { x: 0, y: 0 } :\n            this._getPointerPositionInElement(referenceElement, event);\n        const pointerPosition = this._pickupPositionOnPage = this._lastKnownPointerPosition =\n            this._getPointerPositionOnPage(event);\n        this._pointerDirectionDelta = { x: 0, y: 0 };\n        this._pointerPositionAtLastDirectionChange = { x: pointerPosition.x, y: pointerPosition.y };\n        this._dragStartTime = Date.now();\n        this._dragDropRegistry.startDragging(this, event);\n    }\n    /** Cleans up the DOM artifacts that were added to facilitate the element being dragged. */\n    _cleanupDragArtifacts(event) {\n        // Restore the element's visibility and insert it at its old position in the DOM.\n        // It's important that we maintain the position, because moving the element around in the DOM\n        // can throw off `NgFor` which does smart diffing and re-creates elements only when necessary,\n        // while moving the existing elements in all other cases.\n        this._rootElement.style.display = '';\n        this._anchor.parentNode.replaceChild(this._rootElement, this._anchor);\n        this._destroyPreview();\n        this._destroyPlaceholder();\n        this._boundaryRect = this._previewRect = undefined;\n        // Re-enter the NgZone since we bound `document` events on the outside.\n        this._ngZone.run(() => {\n            const container = this._dropContainer;\n            const currentIndex = container.getItemIndex(this);\n            const pointerPosition = this._getPointerPositionOnPage(event);\n            const distance = this._getDragDistance(this._getPointerPositionOnPage(event));\n            const isPointerOverContainer = container._isOverContainer(pointerPosition.x, pointerPosition.y);\n            this.ended.next({ source: this, distance });\n            this.dropped.next({\n                item: this,\n                currentIndex,\n                previousIndex: this._initialIndex,\n                container: container,\n                previousContainer: this._initialContainer,\n                isPointerOverContainer,\n                distance\n            });\n            container.drop(this, currentIndex, this._initialContainer, isPointerOverContainer, distance, this._initialIndex);\n            this._dropContainer = this._initialContainer;\n        });\n    }\n    /**\n     * Updates the item's position in its drop container, or moves it\n     * into a new one, depending on its current drag position.\n     */\n    _updateActiveDropContainer({ x, y }, { x: rawX, y: rawY }) {\n        // Drop container that draggable has been moved into.\n        let newContainer = this._initialContainer._getSiblingContainerFromPosition(this, x, y);\n        // If we couldn't find a new container to move the item into, and the item has left its\n        // initial container, check whether the it's over the initial container. This handles the\n        // case where two containers are connected one way and the user tries to undo dragging an\n        // item into a new container.\n        if (!newContainer && this._dropContainer !== this._initialContainer &&\n            this._initialContainer._isOverContainer(x, y)) {\n            newContainer = this._initialContainer;\n        }\n        if (newContainer && newContainer !== this._dropContainer) {\n            this._ngZone.run(() => {\n                // Notify the old container that the item has left.\n                this.exited.next({ item: this, container: this._dropContainer });\n                this._dropContainer.exit(this);\n                // Notify the new container that the item has entered.\n                this._dropContainer = newContainer;\n                this._dropContainer.enter(this, x, y, newContainer === this._initialContainer &&\n                    // If we're re-entering the initial container and sorting is disabled,\n                    // put item the into its starting index to begin with.\n                    newContainer.sortingDisabled ? this._initialIndex : undefined);\n                this.entered.next({\n                    item: this,\n                    container: newContainer,\n                    currentIndex: newContainer.getItemIndex(this)\n                });\n            });\n        }\n        this._dropContainer._startScrollingIfNecessary(rawX, rawY);\n        this._dropContainer._sortItem(this, x, y, this._pointerDirectionDelta);\n        this._preview.style.transform =\n            getTransform(x - this._pickupPositionInElement.x, y - this._pickupPositionInElement.y);\n    }\n    /**\n     * Creates the element that will be rendered next to the user's pointer\n     * and will be used as a preview of the element that is being dragged.\n     */\n    _createPreviewElement() {\n        const previewConfig = this._previewTemplate;\n        const previewClass = this.previewClass;\n        const previewTemplate = previewConfig ? previewConfig.template : null;\n        let preview;\n        if (previewTemplate && previewConfig) {\n            // Measure the element before we've inserted the preview\n            // since the insertion could throw off the measurement.\n            const rootRect = previewConfig.matchSize ? this._rootElement.getBoundingClientRect() : null;\n            const viewRef = previewConfig.viewContainer.createEmbeddedView(previewTemplate, previewConfig.context);\n            viewRef.detectChanges();\n            preview = getRootNode(viewRef, this._document);\n            this._previewRef = viewRef;\n            if (previewConfig.matchSize) {\n                matchElementSize(preview, rootRect);\n            }\n            else {\n                preview.style.transform =\n                    getTransform(this._pickupPositionOnPage.x, this._pickupPositionOnPage.y);\n            }\n        }\n        else {\n            const element = this._rootElement;\n            preview = deepCloneNode(element);\n            matchElementSize(preview, element.getBoundingClientRect());\n        }\n        extendStyles(preview.style, {\n            // It's important that we disable the pointer events on the preview, because\n            // it can throw off the `document.elementFromPoint` calls in the `CdkDropList`.\n            pointerEvents: 'none',\n            // We have to reset the margin, because it can throw off positioning relative to the viewport.\n            margin: '0',\n            position: 'fixed',\n            top: '0',\n            left: '0',\n            zIndex: `${this._config.zIndex || 1000}`\n        });\n        toggleNativeDragInteractions(preview, false);\n        preview.classList.add('cdk-drag-preview');\n        preview.setAttribute('dir', this._direction);\n        if (previewClass) {\n            if (Array.isArray(previewClass)) {\n                previewClass.forEach(className => preview.classList.add(className));\n            }\n            else {\n                preview.classList.add(previewClass);\n            }\n        }\n        return preview;\n    }\n    /**\n     * Animates the preview element from its current position to the location of the drop placeholder.\n     * @returns Promise that resolves when the animation completes.\n     */\n    _animatePreviewToPlaceholder() {\n        // If the user hasn't moved yet, the transitionend event won't fire.\n        if (!this._hasMoved) {\n            return Promise.resolve();\n        }\n        const placeholderRect = this._placeholder.getBoundingClientRect();\n        // Apply the class that adds a transition to the preview.\n        this._preview.classList.add('cdk-drag-animating');\n        // Move the preview to the placeholder position.\n        this._preview.style.transform = getTransform(placeholderRect.left, placeholderRect.top);\n        // If the element doesn't have a `transition`, the `transitionend` event won't fire. Since\n        // we need to trigger a style recalculation in order for the `cdk-drag-animating` class to\n        // apply its style, we take advantage of the available info to figure out whether we need to\n        // bind the event in the first place.\n        const duration = getTransformTransitionDurationInMs(this._preview);\n        if (duration === 0) {\n            return Promise.resolve();\n        }\n        return this._ngZone.runOutsideAngular(() => {\n            return new Promise(resolve => {\n                const handler = ((event) => {\n                    if (!event || (event.target === this._preview && event.propertyName === 'transform')) {\n                        this._preview.removeEventListener('transitionend', handler);\n                        resolve();\n                        clearTimeout(timeout);\n                    }\n                });\n                // If a transition is short enough, the browser might not fire the `transitionend` event.\n                // Since we know how long it's supposed to take, add a timeout with a 50% buffer that'll\n                // fire if the transition hasn't completed when it was supposed to.\n                const timeout = setTimeout(handler, duration * 1.5);\n                this._preview.addEventListener('transitionend', handler);\n            });\n        });\n    }\n    /** Creates an element that will be shown instead of the current element while dragging. */\n    _createPlaceholderElement() {\n        const placeholderConfig = this._placeholderTemplate;\n        const placeholderTemplate = placeholderConfig ? placeholderConfig.template : null;\n        let placeholder;\n        if (placeholderTemplate) {\n            this._placeholderRef = placeholderConfig.viewContainer.createEmbeddedView(placeholderTemplate, placeholderConfig.context);\n            this._placeholderRef.detectChanges();\n            placeholder = getRootNode(this._placeholderRef, this._document);\n        }\n        else {\n            placeholder = deepCloneNode(this._rootElement);\n        }\n        placeholder.classList.add('cdk-drag-placeholder');\n        return placeholder;\n    }\n    /**\n     * Figures out the coordinates at which an element was picked up.\n     * @param referenceElement Element that initiated the dragging.\n     * @param event Event that initiated the dragging.\n     */\n    _getPointerPositionInElement(referenceElement, event) {\n        const elementRect = this._rootElement.getBoundingClientRect();\n        const handleElement = referenceElement === this._rootElement ? null : referenceElement;\n        const referenceRect = handleElement ? handleElement.getBoundingClientRect() : elementRect;\n        const point = isTouchEvent(event) ? event.targetTouches[0] : event;\n        const scrollPosition = this._getViewportScrollPosition();\n        const x = point.pageX - referenceRect.left - scrollPosition.left;\n        const y = point.pageY - referenceRect.top - scrollPosition.top;\n        return {\n            x: referenceRect.left - elementRect.left + x,\n            y: referenceRect.top - elementRect.top + y\n        };\n    }\n    /** Determines the point of the page that was touched by the user. */\n    _getPointerPositionOnPage(event) {\n        const scrollPosition = this._getViewportScrollPosition();\n        const point = isTouchEvent(event) ?\n            // `touches` will be empty for start/end events so we have to fall back to `changedTouches`.\n            // Also note that on real devices we're guaranteed for either `touches` or `changedTouches`\n            // to have a value, but Firefox in device emulation mode has a bug where both can be empty\n            // for `touchstart` and `touchend` so we fall back to a dummy object in order to avoid\n            // throwing an error. The value returned here will be incorrect, but since this only\n            // breaks inside a developer tool and the value is only used for secondary information,\n            // we can get away with it. See https://bugzilla.mozilla.org/show_bug.cgi?id=1615824.\n            (event.touches[0] || event.changedTouches[0] || { pageX: 0, pageY: 0 }) : event;\n        const x = point.pageX - scrollPosition.left;\n        const y = point.pageY - scrollPosition.top;\n        // if dragging SVG element, try to convert from the screen coordinate system to the SVG\n        // coordinate system\n        if (this._ownerSVGElement) {\n            const svgMatrix = this._ownerSVGElement.getScreenCTM();\n            if (svgMatrix) {\n                const svgPoint = this._ownerSVGElement.createSVGPoint();\n                svgPoint.x = x;\n                svgPoint.y = y;\n                return svgPoint.matrixTransform(svgMatrix.inverse());\n            }\n        }\n        return { x, y };\n    }\n    /** Gets the pointer position on the page, accounting for any position constraints. */\n    _getConstrainedPointerPosition(point) {\n        const dropContainerLock = this._dropContainer ? this._dropContainer.lockAxis : null;\n        let { x, y } = this.constrainPosition ? this.constrainPosition(point, this) : point;\n        if (this.lockAxis === 'x' || dropContainerLock === 'x') {\n            y = this._pickupPositionOnPage.y;\n        }\n        else if (this.lockAxis === 'y' || dropContainerLock === 'y') {\n            x = this._pickupPositionOnPage.x;\n        }\n        if (this._boundaryRect) {\n            const { x: pickupX, y: pickupY } = this._pickupPositionInElement;\n            const boundaryRect = this._boundaryRect;\n            const previewRect = this._previewRect;\n            const minY = boundaryRect.top + pickupY;\n            const maxY = boundaryRect.bottom - (previewRect.height - pickupY);\n            const minX = boundaryRect.left + pickupX;\n            const maxX = boundaryRect.right - (previewRect.width - pickupX);\n            x = clamp(x, minX, maxX);\n            y = clamp(y, minY, maxY);\n        }\n        return { x, y };\n    }\n    /** Updates the current drag delta, based on the user's current pointer position on the page. */\n    _updatePointerDirectionDelta(pointerPositionOnPage) {\n        const { x, y } = pointerPositionOnPage;\n        const delta = this._pointerDirectionDelta;\n        const positionSinceLastChange = this._pointerPositionAtLastDirectionChange;\n        // Amount of pixels the user has dragged since the last time the direction changed.\n        const changeX = Math.abs(x - positionSinceLastChange.x);\n        const changeY = Math.abs(y - positionSinceLastChange.y);\n        // Because we handle pointer events on a per-pixel basis, we don't want the delta\n        // to change for every pixel, otherwise anything that depends on it can look erratic.\n        // To make the delta more consistent, we track how much the user has moved since the last\n        // delta change and we only update it after it has reached a certain threshold.\n        if (changeX > this._config.pointerDirectionChangeThreshold) {\n            delta.x = x > positionSinceLastChange.x ? 1 : -1;\n            positionSinceLastChange.x = x;\n        }\n        if (changeY > this._config.pointerDirectionChangeThreshold) {\n            delta.y = y > positionSinceLastChange.y ? 1 : -1;\n            positionSinceLastChange.y = y;\n        }\n        return delta;\n    }\n    /** Toggles the native drag interactions, based on how many handles are registered. */\n    _toggleNativeDragInteractions() {\n        if (!this._rootElement || !this._handles) {\n            return;\n        }\n        const shouldEnable = this._handles.length > 0 || !this.isDragging();\n        if (shouldEnable !== this._nativeInteractionsEnabled) {\n            this._nativeInteractionsEnabled = shouldEnable;\n            toggleNativeDragInteractions(this._rootElement, shouldEnable);\n        }\n    }\n    /** Removes the manually-added event listeners from the root element. */\n    _removeRootElementListeners(element) {\n        element.removeEventListener('mousedown', this._pointerDown, activeEventListenerOptions);\n        element.removeEventListener('touchstart', this._pointerDown, passiveEventListenerOptions);\n    }\n    /**\n     * Applies a `transform` to the root element, taking into account any existing transforms on it.\n     * @param x New transform value along the X axis.\n     * @param y New transform value along the Y axis.\n     */\n    _applyRootElementTransform(x, y) {\n        const transform = getTransform(x, y);\n        // Cache the previous transform amount only after the first drag sequence, because\n        // we don't want our own transforms to stack on top of each other.\n        if (this._initialTransform == null) {\n            this._initialTransform = this._rootElement.style.transform || '';\n        }\n        // Preserve the previous `transform` value, if there was one. Note that we apply our own\n        // transform before the user's, because things like rotation can affect which direction\n        // the element will be translated towards.\n        this._rootElement.style.transform = this._initialTransform ?\n            transform + ' ' + this._initialTransform : transform;\n    }\n    /**\n     * Gets the distance that the user has dragged during the current drag sequence.\n     * @param currentPosition Current position of the user's pointer.\n     */\n    _getDragDistance(currentPosition) {\n        const pickupPosition = this._pickupPositionOnPage;\n        if (pickupPosition) {\n            return { x: currentPosition.x - pickupPosition.x, y: currentPosition.y - pickupPosition.y };\n        }\n        return { x: 0, y: 0 };\n    }\n    /** Cleans up any cached element dimensions that we don't need after dragging has stopped. */\n    _cleanupCachedDimensions() {\n        this._boundaryRect = this._previewRect = undefined;\n        this._parentPositions.clear();\n    }\n    /**\n     * Checks whether the element is still inside its boundary after the viewport has been resized.\n     * If not, the position is adjusted so that the element fits again.\n     */\n    _containInsideBoundaryOnResize() {\n        let { x, y } = this._passiveTransform;\n        if ((x === 0 && y === 0) || this.isDragging() || !this._boundaryElement) {\n            return;\n        }\n        const boundaryRect = this._boundaryElement.getBoundingClientRect();\n        const elementRect = this._rootElement.getBoundingClientRect();\n        // It's possible that the element got hidden away after dragging (e.g. by switching to a\n        // different tab). Don't do anything in this case so we don't clear the user's position.\n        if ((boundaryRect.width === 0 && boundaryRect.height === 0) ||\n            (elementRect.width === 0 && elementRect.height === 0)) {\n            return;\n        }\n        const leftOverflow = boundaryRect.left - elementRect.left;\n        const rightOverflow = elementRect.right - boundaryRect.right;\n        const topOverflow = boundaryRect.top - elementRect.top;\n        const bottomOverflow = elementRect.bottom - boundaryRect.bottom;\n        // If the element has become wider than the boundary, we can't\n        // do much to make it fit so we just anchor it to the left.\n        if (boundaryRect.width > elementRect.width) {\n            if (leftOverflow > 0) {\n                x += leftOverflow;\n            }\n            if (rightOverflow > 0) {\n                x -= rightOverflow;\n            }\n        }\n        else {\n            x = 0;\n        }\n        // If the element has become taller than the boundary, we can't\n        // do much to make it fit so we just anchor it to the top.\n        if (boundaryRect.height > elementRect.height) {\n            if (topOverflow > 0) {\n                y += topOverflow;\n            }\n            if (bottomOverflow > 0) {\n                y -= bottomOverflow;\n            }\n        }\n        else {\n            y = 0;\n        }\n        if (x !== this._passiveTransform.x || y !== this._passiveTransform.y) {\n            this.setFreeDragPosition({ y, x });\n        }\n    }\n    /** Gets the drag start delay, based on the event type. */\n    _getDragStartDelay(event) {\n        const value = this.dragStartDelay;\n        if (typeof value === 'number') {\n            return value;\n        }\n        else if (isTouchEvent(event)) {\n            return value.touch;\n        }\n        return value ? value.mouse : 0;\n    }\n    /** Updates the internal state of the draggable element when scrolling has occurred. */\n    _updateOnScroll(event) {\n        const scrollDifference = this._parentPositions.handleScroll(event);\n        if (scrollDifference) {\n            const target = event.target;\n            // ClientRect dimensions are based on the scroll position of the page and its parent node so\n            // we have to update the cached boundary ClientRect if the user has scrolled. Check for\n            // the `document` specifically since IE doesn't support `contains` on it.\n            if (this._boundaryRect && (target === this._document ||\n                (target !== this._boundaryElement && target.contains(this._boundaryElement)))) {\n                adjustClientRect(this._boundaryRect, scrollDifference.top, scrollDifference.left);\n            }\n            this._pickupPositionOnPage.x += scrollDifference.left;\n            this._pickupPositionOnPage.y += scrollDifference.top;\n            // If we're in free drag mode, we have to update the active transform, because\n            // it isn't relative to the viewport like the preview inside a drop list.\n            if (!this._dropContainer) {\n                this._activeTransform.x -= scrollDifference.left;\n                this._activeTransform.y -= scrollDifference.top;\n                this._applyRootElementTransform(this._activeTransform.x, this._activeTransform.y);\n            }\n        }\n    }\n    /** Gets the scroll position of the viewport. */\n    _getViewportScrollPosition() {\n        const cachedPosition = this._parentPositions.positions.get(this._document);\n        return cachedPosition ? cachedPosition.scrollPosition :\n            this._viewportRuler.getViewportScrollPosition();\n    }\n}\n/**\n * Gets a 3d `transform` that can be applied to an element.\n * @param x Desired position of the element along the X axis.\n * @param y Desired position of the element along the Y axis.\n */\nfunction getTransform(x, y) {\n    // Round the transforms since some browsers will\n    // blur the elements for sub-pixel transforms.\n    return `translate3d(${Math.round(x)}px, ${Math.round(y)}px, 0)`;\n}\n/** Clamps a value between a minimum and a maximum. */\nfunction clamp(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * Helper to remove a node from the DOM and to do all the necessary null checks.\n * @param node Node to be removed.\n */\nfunction removeNode(node) {\n    if (node && node.parentNode) {\n        node.parentNode.removeChild(node);\n    }\n}\n/** Determines whether an event is a touch event. */\nfunction isTouchEvent(event) {\n    // This function is called for every pixel that the user has dragged so we need it to be\n    // as fast as possible. Since we only bind mouse events and touch events, we can assume\n    // that if the event's name starts with `t`, it's a touch event.\n    return event.type[0] === 't';\n}\n/** Gets the element into which the drag preview should be inserted. */\nfunction getPreviewInsertionPoint(documentRef) {\n    // We can't use the body if the user is in fullscreen mode,\n    // because the preview will render under the fullscreen element.\n    // TODO(crisbeto): dedupe this with the `FullscreenOverlayContainer` eventually.\n    return documentRef.fullscreenElement ||\n        documentRef.webkitFullscreenElement ||\n        documentRef.mozFullScreenElement ||\n        documentRef.msFullscreenElement ||\n        documentRef.body;\n}\n/**\n * Gets the root HTML element of an embedded view.\n * If the root is not an HTML element it gets wrapped in one.\n */\nfunction getRootNode(viewRef, _document) {\n    const rootNodes = viewRef.rootNodes;\n    if (rootNodes.length === 1 && rootNodes[0].nodeType === _document.ELEMENT_NODE) {\n        return rootNodes[0];\n    }\n    const wrapper = _document.createElement('div');\n    rootNodes.forEach(node => wrapper.appendChild(node));\n    return wrapper;\n}\n/**\n * Matches the target element's size to the source's size.\n * @param target Element that needs to be resized.\n * @param sourceRect Dimensions of the source element.\n */\nfunction matchElementSize(target, sourceRect) {\n    target.style.width = `${sourceRect.width}px`;\n    target.style.height = `${sourceRect.height}px`;\n    target.style.transform = getTransform(sourceRect.left, sourceRect.top);\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Moves an item one index in an array to another.\n * @param array Array in which to move the item.\n * @param fromIndex Starting index of the item.\n * @param toIndex Index to which the item should be moved.\n */\nfunction moveItemInArray(array, fromIndex, toIndex) {\n    const from = clamp$1(fromIndex, array.length - 1);\n    const to = clamp$1(toIndex, array.length - 1);\n    if (from === to) {\n        return;\n    }\n    const target = array[from];\n    const delta = to < from ? -1 : 1;\n    for (let i = from; i !== to; i += delta) {\n        array[i] = array[i + delta];\n    }\n    array[to] = target;\n}\n/**\n * Moves an item from one array to another.\n * @param currentArray Array from which to transfer the item.\n * @param targetArray Array into which to put the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n */\nfunction transferArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const from = clamp$1(currentIndex, currentArray.length - 1);\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray.splice(from, 1)[0]);\n    }\n}\n/**\n * Copies an item from one array to another, leaving it in its\n * original position in current array.\n * @param currentArray Array from which to copy the item.\n * @param targetArray Array into which is copy the item.\n * @param currentIndex Index of the item in its current array.\n * @param targetIndex Index at which to insert the item.\n *\n */\nfunction copyArrayItem(currentArray, targetArray, currentIndex, targetIndex) {\n    const to = clamp$1(targetIndex, targetArray.length);\n    if (currentArray.length) {\n        targetArray.splice(to, 0, currentArray[currentIndex]);\n    }\n}\n/** Clamps a number between zero and a maximum. */\nfunction clamp$1(value, max) {\n    return Math.max(0, Math.min(max, value));\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Proximity, as a ratio to width/height, at which a\n * dragged item will affect the drop container.\n */\nconst DROP_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Proximity, as a ratio to width/height at which to start auto-scrolling the drop list or the\n * viewport. The value comes from trying it out manually until it feels right.\n */\nconst SCROLL_PROXIMITY_THRESHOLD = 0.05;\n/**\n * Number of pixels to scroll for each frame when auto-scrolling an element.\n * The value comes from trying it out manually until it feels right.\n */\nconst AUTO_SCROLL_STEP = 2;\n/**\n * Reference to a drop list. Used to manipulate or dispose of the container.\n */\nclass DropListRef {\n    constructor(element, _dragDropRegistry, _document, _ngZone, _viewportRuler) {\n        this._dragDropRegistry = _dragDropRegistry;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        /** Whether starting a dragging sequence from this container is disabled. */\n        this.disabled = false;\n        /** Whether sorting items within the list is disabled. */\n        this.sortingDisabled = false;\n        /**\n         * Whether auto-scrolling the view when the user\n         * moves their pointer close to the edges is disabled.\n         */\n        this.autoScrollDisabled = false;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits right before dragging has started. */\n        this.beforeStarted = new Subject();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new Subject();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new Subject();\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new Subject();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new Subject();\n        /** Whether an item in the list is being dragged. */\n        this._isDragging = false;\n        /** Cache of the dimensions of all the items inside the container. */\n        this._itemPositions = [];\n        /**\n         * Keeps track of the item that was last swapped with the dragged item, as well as what direction\n         * the pointer was moving in when the swap occured and whether the user's pointer continued to\n         * overlap with the swapped item after the swapping occurred.\n         */\n        this._previousSwap = { drag: null, delta: 0, overlaps: false };\n        /** Drop lists that are connected to the current one. */\n        this._siblings = [];\n        /** Direction in which the list is oriented. */\n        this._orientation = 'vertical';\n        /** Connected siblings that currently have a dragged item. */\n        this._activeSiblings = new Set();\n        /** Layout direction of the drop list. */\n        this._direction = 'ltr';\n        /** Subscription to the window being scrolled. */\n        this._viewportScrollSubscription = Subscription.EMPTY;\n        /** Vertical direction in which the list is currently scrolling. */\n        this._verticalScrollDirection = 0 /* NONE */;\n        /** Horizontal direction in which the list is currently scrolling. */\n        this._horizontalScrollDirection = 0 /* NONE */;\n        /** Used to signal to the current auto-scroll sequence when to stop. */\n        this._stopScrollTimers = new Subject();\n        /** Shadow root of the current element. Necessary for `elementFromPoint` to resolve correctly. */\n        this._cachedShadowRoot = null;\n        /** Starts the interval that'll auto-scroll the element. */\n        this._startScrollInterval = () => {\n            this._stopScrolling();\n            interval(0, animationFrameScheduler)\n                .pipe(takeUntil(this._stopScrollTimers))\n                .subscribe(() => {\n                const node = this._scrollNode;\n                if (this._verticalScrollDirection === 1 /* UP */) {\n                    incrementVerticalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._verticalScrollDirection === 2 /* DOWN */) {\n                    incrementVerticalScroll(node, AUTO_SCROLL_STEP);\n                }\n                if (this._horizontalScrollDirection === 1 /* LEFT */) {\n                    incrementHorizontalScroll(node, -AUTO_SCROLL_STEP);\n                }\n                else if (this._horizontalScrollDirection === 2 /* RIGHT */) {\n                    incrementHorizontalScroll(node, AUTO_SCROLL_STEP);\n                }\n            });\n        };\n        this.element = coerceElement(element);\n        this._document = _document;\n        this.withScrollableParents([this.element]);\n        _dragDropRegistry.registerDropContainer(this);\n        this._parentPositions = new ParentPositionTracker(_document, _viewportRuler);\n    }\n    /** Removes the drop list functionality from the DOM element. */\n    dispose() {\n        this._stopScrolling();\n        this._stopScrollTimers.complete();\n        this._viewportScrollSubscription.unsubscribe();\n        this.beforeStarted.complete();\n        this.entered.complete();\n        this.exited.complete();\n        this.dropped.complete();\n        this.sorted.complete();\n        this._activeSiblings.clear();\n        this._scrollNode = null;\n        this._parentPositions.clear();\n        this._dragDropRegistry.removeDropContainer(this);\n    }\n    /** Whether an item from this list is currently being dragged. */\n    isDragging() {\n        return this._isDragging;\n    }\n    /** Starts dragging an item. */\n    start() {\n        const styles = coerceElement(this.element).style;\n        this.beforeStarted.next();\n        this._isDragging = true;\n        // We need to disable scroll snapping while the user is dragging, because it breaks automatic\n        // scrolling. The browser seems to round the value based on the snapping points which means\n        // that we can't increment/decrement the scroll position.\n        this._initialScrollSnap = styles.msScrollSnapType || styles.scrollSnapType || '';\n        styles.scrollSnapType = styles.msScrollSnapType = 'none';\n        this._cacheItems();\n        this._siblings.forEach(sibling => sibling._startReceiving(this));\n        this._viewportScrollSubscription.unsubscribe();\n        this._listenToScrollEvents();\n    }\n    /**\n     * Emits an event to indicate that the user moved an item into the container.\n     * @param item Item that was moved into the container.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param index Index at which the item entered. If omitted, the container will try to figure it\n     *   out automatically.\n     */\n    enter(item, pointerX, pointerY, index) {\n        this.start();\n        // If sorting is disabled, we want the item to return to its starting\n        // position if the user is returning it to its initial container.\n        let newIndex;\n        if (index == null) {\n            newIndex = this.sortingDisabled ? this._draggables.indexOf(item) : -1;\n            if (newIndex === -1) {\n                // We use the coordinates of where the item entered the drop\n                // zone to figure out at which index it should be inserted.\n                newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY);\n            }\n        }\n        else {\n            newIndex = index;\n        }\n        const activeDraggables = this._activeDraggables;\n        const currentIndex = activeDraggables.indexOf(item);\n        const placeholder = item.getPlaceholderElement();\n        let newPositionReference = activeDraggables[newIndex];\n        // If the item at the new position is the same as the item that is being dragged,\n        // it means that we're trying to restore the item to its initial position. In this\n        // case we should use the next item from the list as the reference.\n        if (newPositionReference === item) {\n            newPositionReference = activeDraggables[newIndex + 1];\n        }\n        // Since the item may be in the `activeDraggables` already (e.g. if the user dragged it\n        // into another container and back again), we have to ensure that it isn't duplicated.\n        if (currentIndex > -1) {\n            activeDraggables.splice(currentIndex, 1);\n        }\n        // Don't use items that are being dragged as a reference, because\n        // their element has been moved down to the bottom of the body.\n        if (newPositionReference && !this._dragDropRegistry.isDragging(newPositionReference)) {\n            const element = newPositionReference.getRootElement();\n            element.parentElement.insertBefore(placeholder, element);\n            activeDraggables.splice(newIndex, 0, item);\n        }\n        else if (this._shouldEnterAsFirstChild(pointerX, pointerY)) {\n            const reference = activeDraggables[0].getRootElement();\n            reference.parentNode.insertBefore(placeholder, reference);\n            activeDraggables.unshift(item);\n        }\n        else {\n            coerceElement(this.element).appendChild(placeholder);\n            activeDraggables.push(item);\n        }\n        // The transform needs to be cleared so it doesn't throw off the measurements.\n        placeholder.style.transform = '';\n        // Note that the positions were already cached when we called `start` above,\n        // but we need to refresh them since the amount of items has changed and also parent rects.\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n        this.entered.next({ item, container: this, currentIndex: this.getItemIndex(item) });\n    }\n    /**\n     * Removes an item from the container after it was dragged into another container by the user.\n     * @param item Item that was dragged out.\n     */\n    exit(item) {\n        this._reset();\n        this.exited.next({ item, container: this });\n    }\n    /**\n     * Drops an item into this container.\n     * @param item Item being dropped into the container.\n     * @param currentIndex Index at which the item should be inserted.\n     * @param previousContainer Container from which the item got dragged in.\n     * @param isPointerOverContainer Whether the user's pointer was over the\n     *    container when the item was dropped.\n     * @param distance Distance the user has dragged since the start of the dragging sequence.\n     * @param previousIndex Index of the item when dragging started.\n     *\n     * @breaking-change 11.0.0 `previousIndex` parameter to become required.\n     */\n    drop(item, currentIndex, previousContainer, isPointerOverContainer, distance, previousIndex) {\n        this._reset();\n        // @breaking-change 11.0.0 Remove this fallback logic once `previousIndex` is a required param.\n        if (previousIndex == null) {\n            previousIndex = previousContainer.getItemIndex(item);\n        }\n        this.dropped.next({ item,\n            currentIndex,\n            previousIndex,\n            container: this,\n            previousContainer,\n            isPointerOverContainer,\n            distance\n        });\n    }\n    /**\n     * Sets the draggable items that are a part of this list.\n     * @param items Items that are a part of this list.\n     */\n    withItems(items) {\n        const previousItems = this._draggables;\n        this._draggables = items;\n        items.forEach(item => item._withDropContainer(this));\n        if (this.isDragging()) {\n            const draggedItems = previousItems.filter(item => item.isDragging());\n            // If all of the items being dragged were removed\n            // from the list, abort the current drag sequence.\n            if (draggedItems.every(item => items.indexOf(item) === -1)) {\n                this._reset();\n            }\n            else {\n                this._cacheItems();\n            }\n        }\n        return this;\n    }\n    /** Sets the layout direction of the drop list. */\n    withDirection(direction) {\n        this._direction = direction;\n        return this;\n    }\n    /**\n     * Sets the containers that are connected to this one. When two or more containers are\n     * connected, the user will be allowed to transfer items between them.\n     * @param connectedTo Other containers that the current containers should be connected to.\n     */\n    connectedTo(connectedTo) {\n        this._siblings = connectedTo.slice();\n        return this;\n    }\n    /**\n     * Sets the orientation of the container.\n     * @param orientation New orientation for the container.\n     */\n    withOrientation(orientation) {\n        this._orientation = orientation;\n        return this;\n    }\n    /**\n     * Sets which parent elements are can be scrolled while the user is dragging.\n     * @param elements Elements that can be scrolled.\n     */\n    withScrollableParents(elements) {\n        const element = coerceElement(this.element);\n        // We always allow the current element to be scrollable\n        // so we need to ensure that it's in the array.\n        this._scrollableElements =\n            elements.indexOf(element) === -1 ? [element, ...elements] : elements.slice();\n        return this;\n    }\n    /** Gets the scrollable parents that are registered with this drop container. */\n    getScrollableParents() {\n        return this._scrollableElements;\n    }\n    /**\n     * Figures out the index of an item in the container.\n     * @param item Item whose index should be determined.\n     */\n    getItemIndex(item) {\n        if (!this._isDragging) {\n            return this._draggables.indexOf(item);\n        }\n        // Items are sorted always by top/left in the cache, however they flow differently in RTL.\n        // The rest of the logic still stands no matter what orientation we're in, however\n        // we need to invert the array when determining the index.\n        const items = this._orientation === 'horizontal' && this._direction === 'rtl' ?\n            this._itemPositions.slice().reverse() : this._itemPositions;\n        return findIndex(items, currentItem => currentItem.drag === item);\n    }\n    /**\n     * Whether the list is able to receive the item that\n     * is currently being dragged inside a connected drop list.\n     */\n    isReceiving() {\n        return this._activeSiblings.size > 0;\n    }\n    /**\n     * Sorts an item inside the container based on its position.\n     * @param item Item to be sorted.\n     * @param pointerX Position of the item along the X axis.\n     * @param pointerY Position of the item along the Y axis.\n     * @param pointerDelta Direction in which the pointer is moving along each axis.\n     */\n    _sortItem(item, pointerX, pointerY, pointerDelta) {\n        // Don't sort the item if sorting is disabled or it's out of range.\n        if (this.sortingDisabled ||\n            !isPointerNearClientRect(this._clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n            return;\n        }\n        const siblings = this._itemPositions;\n        const newIndex = this._getItemIndexFromPointerPosition(item, pointerX, pointerY, pointerDelta);\n        if (newIndex === -1 && siblings.length > 0) {\n            return;\n        }\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentIndex = findIndex(siblings, currentItem => currentItem.drag === item);\n        const siblingAtNewPosition = siblings[newIndex];\n        const currentPosition = siblings[currentIndex].clientRect;\n        const newPosition = siblingAtNewPosition.clientRect;\n        const delta = currentIndex > newIndex ? 1 : -1;\n        // How many pixels the item's placeholder should be offset.\n        const itemOffset = this._getItemOffsetPx(currentPosition, newPosition, delta);\n        // How many pixels all the other items should be offset.\n        const siblingOffset = this._getSiblingOffsetPx(currentIndex, siblings, delta);\n        // Save the previous order of the items before moving the item to its new index.\n        // We use this to check whether an item has been moved as a result of the sorting.\n        const oldOrder = siblings.slice();\n        // Shuffle the array in place.\n        moveItemInArray(siblings, currentIndex, newIndex);\n        this.sorted.next({\n            previousIndex: currentIndex,\n            currentIndex: newIndex,\n            container: this,\n            item\n        });\n        siblings.forEach((sibling, index) => {\n            // Don't do anything if the position hasn't changed.\n            if (oldOrder[index] === sibling) {\n                return;\n            }\n            const isDraggedItem = sibling.drag === item;\n            const offset = isDraggedItem ? itemOffset : siblingOffset;\n            const elementToOffset = isDraggedItem ? item.getPlaceholderElement() :\n                sibling.drag.getRootElement();\n            // Update the offset to reflect the new position.\n            sibling.offset += offset;\n            // Since we're moving the items with a `transform`, we need to adjust their cached\n            // client rects to reflect their new position, as well as swap their positions in the cache.\n            // Note that we shouldn't use `getBoundingClientRect` here to update the cache, because the\n            // elements may be mid-animation which will give us a wrong result.\n            if (isHorizontal) {\n                // Round the transforms since some browsers will\n                // blur the elements, for sub-pixel transforms.\n                elementToOffset.style.transform = `translate3d(${Math.round(sibling.offset)}px, 0, 0)`;\n                adjustClientRect(sibling.clientRect, 0, offset);\n            }\n            else {\n                elementToOffset.style.transform = `translate3d(0, ${Math.round(sibling.offset)}px, 0)`;\n                adjustClientRect(sibling.clientRect, offset, 0);\n            }\n        });\n        // Note that it's important that we do this after the client rects have been adjusted.\n        this._previousSwap.overlaps = isInsideClientRect(newPosition, pointerX, pointerY);\n        this._previousSwap.drag = siblingAtNewPosition.drag;\n        this._previousSwap.delta = isHorizontal ? pointerDelta.x : pointerDelta.y;\n    }\n    /**\n     * Checks whether the user's pointer is close to the edges of either the\n     * viewport or the drop list and starts the auto-scroll sequence.\n     * @param pointerX User's pointer position along the x axis.\n     * @param pointerY User's pointer position along the y axis.\n     */\n    _startScrollingIfNecessary(pointerX, pointerY) {\n        if (this.autoScrollDisabled) {\n            return;\n        }\n        let scrollNode;\n        let verticalScrollDirection = 0 /* NONE */;\n        let horizontalScrollDirection = 0 /* NONE */;\n        // Check whether we should start scrolling any of the parent containers.\n        this._parentPositions.positions.forEach((position, element) => {\n            // We have special handling for the `document` below. Also this would be\n            // nicer with a  for...of loop, but it requires changing a compiler flag.\n            if (element === this._document || !position.clientRect || scrollNode) {\n                return;\n            }\n            if (isPointerNearClientRect(position.clientRect, DROP_PROXIMITY_THRESHOLD, pointerX, pointerY)) {\n                [verticalScrollDirection, horizontalScrollDirection] = getElementScrollDirections(element, position.clientRect, pointerX, pointerY);\n                if (verticalScrollDirection || horizontalScrollDirection) {\n                    scrollNode = element;\n                }\n            }\n        });\n        // Otherwise check if we can start scrolling the viewport.\n        if (!verticalScrollDirection && !horizontalScrollDirection) {\n            const { width, height } = this._viewportRuler.getViewportSize();\n            const clientRect = { width, height, top: 0, right: width, bottom: height, left: 0 };\n            verticalScrollDirection = getVerticalScrollDirection(clientRect, pointerY);\n            horizontalScrollDirection = getHorizontalScrollDirection(clientRect, pointerX);\n            scrollNode = window;\n        }\n        if (scrollNode && (verticalScrollDirection !== this._verticalScrollDirection ||\n            horizontalScrollDirection !== this._horizontalScrollDirection ||\n            scrollNode !== this._scrollNode)) {\n            this._verticalScrollDirection = verticalScrollDirection;\n            this._horizontalScrollDirection = horizontalScrollDirection;\n            this._scrollNode = scrollNode;\n            if ((verticalScrollDirection || horizontalScrollDirection) && scrollNode) {\n                this._ngZone.runOutsideAngular(this._startScrollInterval);\n            }\n            else {\n                this._stopScrolling();\n            }\n        }\n    }\n    /** Stops any currently-running auto-scroll sequences. */\n    _stopScrolling() {\n        this._stopScrollTimers.next();\n    }\n    /** Caches the positions of the configured scrollable parents. */\n    _cacheParentPositions() {\n        const element = coerceElement(this.element);\n        this._parentPositions.cache(this._scrollableElements);\n        // The list element is always in the `scrollableElements`\n        // so we can take advantage of the cached `ClientRect`.\n        this._clientRect = this._parentPositions.positions.get(element).clientRect;\n    }\n    /** Refreshes the position cache of the items and sibling containers. */\n    _cacheItemPositions() {\n        const isHorizontal = this._orientation === 'horizontal';\n        this._itemPositions = this._activeDraggables.map(drag => {\n            const elementToMeasure = drag.getVisibleElement();\n            return { drag, offset: 0, clientRect: getMutableClientRect(elementToMeasure) };\n        }).sort((a, b) => {\n            return isHorizontal ? a.clientRect.left - b.clientRect.left :\n                a.clientRect.top - b.clientRect.top;\n        });\n    }\n    /** Resets the container to its initial state. */\n    _reset() {\n        this._isDragging = false;\n        const styles = coerceElement(this.element).style;\n        styles.scrollSnapType = styles.msScrollSnapType = this._initialScrollSnap;\n        // TODO(crisbeto): may have to wait for the animations to finish.\n        this._activeDraggables.forEach(item => {\n            const rootElement = item.getRootElement();\n            if (rootElement) {\n                rootElement.style.transform = '';\n            }\n        });\n        this._siblings.forEach(sibling => sibling._stopReceiving(this));\n        this._activeDraggables = [];\n        this._itemPositions = [];\n        this._previousSwap.drag = null;\n        this._previousSwap.delta = 0;\n        this._previousSwap.overlaps = false;\n        this._stopScrolling();\n        this._viewportScrollSubscription.unsubscribe();\n        this._parentPositions.clear();\n    }\n    /**\n     * Gets the offset in pixels by which the items that aren't being dragged should be moved.\n     * @param currentIndex Index of the item currently being dragged.\n     * @param siblings All of the items in the list.\n     * @param delta Direction in which the user is moving.\n     */\n    _getSiblingOffsetPx(currentIndex, siblings, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        const currentPosition = siblings[currentIndex].clientRect;\n        const immediateSibling = siblings[currentIndex + delta * -1];\n        let siblingOffset = currentPosition[isHorizontal ? 'width' : 'height'] * delta;\n        if (immediateSibling) {\n            const start = isHorizontal ? 'left' : 'top';\n            const end = isHorizontal ? 'right' : 'bottom';\n            // Get the spacing between the start of the current item and the end of the one immediately\n            // after it in the direction in which the user is dragging, or vice versa. We add it to the\n            // offset in order to push the element to where it will be when it's inline and is influenced\n            // by the `margin` of its siblings.\n            if (delta === -1) {\n                siblingOffset -= immediateSibling.clientRect[start] - currentPosition[end];\n            }\n            else {\n                siblingOffset += currentPosition[start] - immediateSibling.clientRect[end];\n            }\n        }\n        return siblingOffset;\n    }\n    /**\n     * Gets the offset in pixels by which the item that is being dragged should be moved.\n     * @param currentPosition Current position of the item.\n     * @param newPosition Position of the item where the current item should be moved.\n     * @param delta Direction in which the user is moving.\n     */\n    _getItemOffsetPx(currentPosition, newPosition, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        let itemOffset = isHorizontal ? newPosition.left - currentPosition.left :\n            newPosition.top - currentPosition.top;\n        // Account for differences in the item width/height.\n        if (delta === -1) {\n            itemOffset += isHorizontal ? newPosition.width - currentPosition.width :\n                newPosition.height - currentPosition.height;\n        }\n        return itemOffset;\n    }\n    /**\n     * Checks if pointer is entering in the first position\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     */\n    _shouldEnterAsFirstChild(pointerX, pointerY) {\n        if (!this._activeDraggables.length) {\n            return false;\n        }\n        const itemPositions = this._itemPositions;\n        const isHorizontal = this._orientation === 'horizontal';\n        // `itemPositions` are sorted by position while `activeDraggables` are sorted by child index\n        // check if container is using some sort of \"reverse\" ordering (eg: flex-direction: row-reverse)\n        const reversed = itemPositions[0].drag !== this._activeDraggables[0];\n        if (reversed) {\n            const lastItemRect = itemPositions[itemPositions.length - 1].clientRect;\n            return isHorizontal ? pointerX >= lastItemRect.right : pointerY >= lastItemRect.bottom;\n        }\n        else {\n            const firstItemRect = itemPositions[0].clientRect;\n            return isHorizontal ? pointerX <= firstItemRect.left : pointerY <= firstItemRect.top;\n        }\n    }\n    /**\n     * Gets the index of an item in the drop container, based on the position of the user's pointer.\n     * @param item Item that is being sorted.\n     * @param pointerX Position of the user's pointer along the X axis.\n     * @param pointerY Position of the user's pointer along the Y axis.\n     * @param delta Direction in which the user is moving their pointer.\n     */\n    _getItemIndexFromPointerPosition(item, pointerX, pointerY, delta) {\n        const isHorizontal = this._orientation === 'horizontal';\n        return findIndex(this._itemPositions, ({ drag, clientRect }, _, array) => {\n            if (drag === item) {\n                // If there's only one item left in the container, it must be\n                // the dragged item itself so we use it as a reference.\n                return array.length < 2;\n            }\n            if (delta) {\n                const direction = isHorizontal ? delta.x : delta.y;\n                // If the user is still hovering over the same item as last time, their cursor hasn't left\n                // the item after we made the swap, and they didn't change the direction in which they're\n                // dragging, we don't consider it a direction swap.\n                if (drag === this._previousSwap.drag && this._previousSwap.overlaps &&\n                    direction === this._previousSwap.delta) {\n                    return false;\n                }\n            }\n            return isHorizontal ?\n                // Round these down since most browsers report client rects with\n                // sub-pixel precision, whereas the pointer coordinates are rounded to pixels.\n                pointerX >= Math.floor(clientRect.left) && pointerX < Math.floor(clientRect.right) :\n                pointerY >= Math.floor(clientRect.top) && pointerY < Math.floor(clientRect.bottom);\n        });\n    }\n    /** Caches the current items in the list and their positions. */\n    _cacheItems() {\n        this._activeDraggables = this._draggables.slice();\n        this._cacheItemPositions();\n        this._cacheParentPositions();\n    }\n    /**\n     * Checks whether the user's pointer is positioned over the container.\n     * @param x Pointer position along the X axis.\n     * @param y Pointer position along the Y axis.\n     */\n    _isOverContainer(x, y) {\n        return isInsideClientRect(this._clientRect, x, y);\n    }\n    /**\n     * Figures out whether an item should be moved into a sibling\n     * drop container, based on its current position.\n     * @param item Drag item that is being moved.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _getSiblingContainerFromPosition(item, x, y) {\n        return this._siblings.find(sibling => sibling._canReceive(item, x, y));\n    }\n    /**\n     * Checks whether the drop list can receive the passed-in item.\n     * @param item Item that is being dragged into the list.\n     * @param x Position of the item along the X axis.\n     * @param y Position of the item along the Y axis.\n     */\n    _canReceive(item, x, y) {\n        if (!isInsideClientRect(this._clientRect, x, y) || !this.enterPredicate(item, this)) {\n            return false;\n        }\n        const elementFromPoint = this._getShadowRoot().elementFromPoint(x, y);\n        // If there's no element at the pointer position, then\n        // the client rect is probably scrolled out of the view.\n        if (!elementFromPoint) {\n            return false;\n        }\n        const nativeElement = coerceElement(this.element);\n        // The `ClientRect`, that we're using to find the container over which the user is\n        // hovering, doesn't give us any information on whether the element has been scrolled\n        // out of the view or whether it's overlapping with other containers. This means that\n        // we could end up transferring the item into a container that's invisible or is positioned\n        // below another one. We use the result from `elementFromPoint` to get the top-most element\n        // at the pointer position and to find whether it's one of the intersecting drop containers.\n        return elementFromPoint === nativeElement || nativeElement.contains(elementFromPoint);\n    }\n    /**\n     * Called by one of the connected drop lists when a dragging sequence has started.\n     * @param sibling Sibling in which dragging has started.\n     */\n    _startReceiving(sibling) {\n        const activeSiblings = this._activeSiblings;\n        if (!activeSiblings.has(sibling)) {\n            activeSiblings.add(sibling);\n            this._cacheParentPositions();\n            this._listenToScrollEvents();\n        }\n    }\n    /**\n     * Called by a connected drop list when dragging has stopped.\n     * @param sibling Sibling whose dragging has stopped.\n     */\n    _stopReceiving(sibling) {\n        this._activeSiblings.delete(sibling);\n        this._viewportScrollSubscription.unsubscribe();\n    }\n    /**\n     * Starts listening to scroll events on the viewport.\n     * Used for updating the internal state of the list.\n     */\n    _listenToScrollEvents() {\n        this._viewportScrollSubscription = this._dragDropRegistry.scroll.subscribe(event => {\n            if (this.isDragging()) {\n                const scrollDifference = this._parentPositions.handleScroll(event);\n                if (scrollDifference) {\n                    // Since we know the amount that the user has scrolled we can shift all of the\n                    // client rectangles ourselves. This is cheaper than re-measuring everything and\n                    // we can avoid inconsistent behavior where we might be measuring the element before\n                    // its position has changed.\n                    this._itemPositions.forEach(({ clientRect }) => {\n                        adjustClientRect(clientRect, scrollDifference.top, scrollDifference.left);\n                    });\n                    // We need two loops for this, because we want all of the cached\n                    // positions to be up-to-date before we re-sort the item.\n                    this._itemPositions.forEach(({ drag }) => {\n                        if (this._dragDropRegistry.isDragging(drag)) {\n                            // We need to re-sort the item manually, because the pointer move\n                            // events won't be dispatched while the user is scrolling.\n                            drag._sortFromLastPointerPosition();\n                        }\n                    });\n                }\n            }\n            else if (this.isReceiving()) {\n                this._cacheParentPositions();\n            }\n        });\n    }\n    /**\n     * Lazily resolves and returns the shadow root of the element. We do this in a function, rather\n     * than saving it in property directly on init, because we want to resolve it as late as possible\n     * in order to ensure that the element has been moved into the shadow DOM. Doing it inside the\n     * constructor might be too early if the element is inside of something like `ngFor` or `ngIf`.\n     */\n    _getShadowRoot() {\n        if (!this._cachedShadowRoot) {\n            const shadowRoot = _getShadowRoot(coerceElement(this.element));\n            this._cachedShadowRoot = shadowRoot || this._document;\n        }\n        return this._cachedShadowRoot;\n    }\n}\n/**\n * Finds the index of an item that matches a predicate function. Used as an equivalent\n * of `Array.prototype.findIndex` which isn't part of the standard Google typings.\n * @param array Array in which to look for matches.\n * @param predicate Function used to determine whether an item is a match.\n */\nfunction findIndex(array, predicate) {\n    for (let i = 0; i < array.length; i++) {\n        if (predicate(array[i], i, array)) {\n            return i;\n        }\n    }\n    return -1;\n}\n/**\n * Increments the vertical scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementVerticalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(0, amount);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollTop += amount;\n    }\n}\n/**\n * Increments the horizontal scroll position of a node.\n * @param node Node whose scroll position should change.\n * @param amount Amount of pixels that the `node` should be scrolled.\n */\nfunction incrementHorizontalScroll(node, amount) {\n    if (node === window) {\n        node.scrollBy(amount, 0);\n    }\n    else {\n        // Ideally we could use `Element.scrollBy` here as well, but IE and Edge don't support it.\n        node.scrollLeft += amount;\n    }\n}\n/**\n * Gets whether the vertical auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getVerticalScrollDirection(clientRect, pointerY) {\n    const { top, bottom, height } = clientRect;\n    const yThreshold = height * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerY >= top - yThreshold && pointerY <= top + yThreshold) {\n        return 1 /* UP */;\n    }\n    else if (pointerY >= bottom - yThreshold && pointerY <= bottom + yThreshold) {\n        return 2 /* DOWN */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets whether the horizontal auto-scroll direction of a node.\n * @param clientRect Dimensions of the node.\n * @param pointerX Position of the user's pointer along the x axis.\n */\nfunction getHorizontalScrollDirection(clientRect, pointerX) {\n    const { left, right, width } = clientRect;\n    const xThreshold = width * SCROLL_PROXIMITY_THRESHOLD;\n    if (pointerX >= left - xThreshold && pointerX <= left + xThreshold) {\n        return 1 /* LEFT */;\n    }\n    else if (pointerX >= right - xThreshold && pointerX <= right + xThreshold) {\n        return 2 /* RIGHT */;\n    }\n    return 0 /* NONE */;\n}\n/**\n * Gets the directions in which an element node should be scrolled,\n * assuming that the user's pointer is already within it scrollable region.\n * @param element Element for which we should calculate the scroll direction.\n * @param clientRect Bounding client rectangle of the element.\n * @param pointerX Position of the user's pointer along the x axis.\n * @param pointerY Position of the user's pointer along the y axis.\n */\nfunction getElementScrollDirections(element, clientRect, pointerX, pointerY) {\n    const computedVertical = getVerticalScrollDirection(clientRect, pointerY);\n    const computedHorizontal = getHorizontalScrollDirection(clientRect, pointerX);\n    let verticalScrollDirection = 0 /* NONE */;\n    let horizontalScrollDirection = 0 /* NONE */;\n    // Note that we here we do some extra checks for whether the element is actually scrollable in\n    // a certain direction and we only assign the scroll direction if it is. We do this so that we\n    // can allow other elements to be scrolled, if the current element can't be scrolled anymore.\n    // This allows us to handle cases where the scroll regions of two scrollable elements overlap.\n    if (computedVertical) {\n        const scrollTop = element.scrollTop;\n        if (computedVertical === 1 /* UP */) {\n            if (scrollTop > 0) {\n                verticalScrollDirection = 1 /* UP */;\n            }\n        }\n        else if (element.scrollHeight - scrollTop > element.clientHeight) {\n            verticalScrollDirection = 2 /* DOWN */;\n        }\n    }\n    if (computedHorizontal) {\n        const scrollLeft = element.scrollLeft;\n        if (computedHorizontal === 1 /* LEFT */) {\n            if (scrollLeft > 0) {\n                horizontalScrollDirection = 1 /* LEFT */;\n            }\n        }\n        else if (element.scrollWidth - scrollLeft > element.clientWidth) {\n            horizontalScrollDirection = 2 /* RIGHT */;\n        }\n    }\n    return [verticalScrollDirection, horizontalScrollDirection];\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Event options that can be used to bind an active, capturing event. */\nconst activeCapturingEventOptions = normalizePassiveListenerOptions({\n    passive: false,\n    capture: true\n});\n/**\n * Service that keeps track of all the drag item and drop container\n * instances, and manages global event listeners on the `document`.\n * @docs-private\n */\n// Note: this class is generic, rather than referencing CdkDrag and CdkDropList directly, in order\n// to avoid circular imports. If we were to reference them here, importing the registry into the\n// classes that are registering themselves will introduce a circular import.\nclass DragDropRegistry {\n    constructor(_ngZone, _document) {\n        this._ngZone = _ngZone;\n        /** Registered drop container instances. */\n        this._dropInstances = new Set();\n        /** Registered drag item instances. */\n        this._dragInstances = new Set();\n        /** Drag item instances that are currently being dragged. */\n        this._activeDragInstances = new Set();\n        /** Keeps track of the event listeners that we've bound to the `document`. */\n        this._globalListeners = new Map();\n        /**\n         * Emits the `touchmove` or `mousemove` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerMove = new Subject();\n        /**\n         * Emits the `touchend` or `mouseup` events that are dispatched\n         * while the user is dragging a drag item instance.\n         */\n        this.pointerUp = new Subject();\n        /** Emits when the viewport has been scrolled while the user is dragging an item. */\n        this.scroll = new Subject();\n        /**\n         * Event listener that will prevent the default browser action while the user is dragging.\n         * @param event Event whose default action should be prevented.\n         */\n        this._preventDefaultWhileDragging = (event) => {\n            if (this._activeDragInstances.size) {\n                event.preventDefault();\n            }\n        };\n        this._document = _document;\n    }\n    /** Adds a drop container to the registry. */\n    registerDropContainer(drop) {\n        if (!this._dropInstances.has(drop)) {\n            this._dropInstances.add(drop);\n        }\n    }\n    /** Adds a drag item instance to the registry. */\n    registerDragItem(drag) {\n        this._dragInstances.add(drag);\n        // The `touchmove` event gets bound once, ahead of time, because WebKit\n        // won't preventDefault on a dynamically-added `touchmove` listener.\n        // See https://bugs.webkit.org/show_bug.cgi?id=184250.\n        if (this._dragInstances.size === 1) {\n            this._ngZone.runOutsideAngular(() => {\n                // The event handler has to be explicitly active,\n                // because newer browsers make it passive by default.\n                this._document.addEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n            });\n        }\n    }\n    /** Removes a drop container from the registry. */\n    removeDropContainer(drop) {\n        this._dropInstances.delete(drop);\n    }\n    /** Removes a drag item instance from the registry. */\n    removeDragItem(drag) {\n        this._dragInstances.delete(drag);\n        this.stopDragging(drag);\n        if (this._dragInstances.size === 0) {\n            this._document.removeEventListener('touchmove', this._preventDefaultWhileDragging, activeCapturingEventOptions);\n        }\n    }\n    /**\n     * Starts the dragging sequence for a drag instance.\n     * @param drag Drag instance which is being dragged.\n     * @param event Event that initiated the dragging.\n     */\n    startDragging(drag, event) {\n        // Do not process the same drag twice to avoid memory leaks and redundant listeners\n        if (this._activeDragInstances.has(drag)) {\n            return;\n        }\n        this._activeDragInstances.add(drag);\n        if (this._activeDragInstances.size === 1) {\n            const isTouchEvent = event.type.startsWith('touch');\n            const moveEvent = isTouchEvent ? 'touchmove' : 'mousemove';\n            const upEvent = isTouchEvent ? 'touchend' : 'mouseup';\n            // We explicitly bind __active__ listeners here, because newer browsers will default to\n            // passive ones for `mousemove` and `touchmove`. The events need to be active, because we\n            // use `preventDefault` to prevent the page from scrolling while the user is dragging.\n            this._globalListeners\n                .set(moveEvent, {\n                handler: (e) => this.pointerMove.next(e),\n                options: activeCapturingEventOptions\n            })\n                .set(upEvent, {\n                handler: (e) => this.pointerUp.next(e),\n                options: true\n            })\n                .set('scroll', {\n                handler: (e) => this.scroll.next(e),\n                // Use capturing so that we pick up scroll changes in any scrollable nodes that aren't\n                // the document. See https://github.com/angular/components/issues/17144.\n                options: true\n            })\n                // Preventing the default action on `mousemove` isn't enough to disable text selection\n                // on Safari so we need to prevent the selection event as well. Alternatively this can\n                // be done by setting `user-select: none` on the `body`, however it has causes a style\n                // recalculation which can be expensive on pages with a lot of elements.\n                .set('selectstart', {\n                handler: this._preventDefaultWhileDragging,\n                options: activeCapturingEventOptions\n            });\n            this._ngZone.runOutsideAngular(() => {\n                this._globalListeners.forEach((config, name) => {\n                    this._document.addEventListener(name, config.handler, config.options);\n                });\n            });\n        }\n    }\n    /** Stops dragging a drag item instance. */\n    stopDragging(drag) {\n        this._activeDragInstances.delete(drag);\n        if (this._activeDragInstances.size === 0) {\n            this._clearGlobalListeners();\n        }\n    }\n    /** Gets whether a drag item instance is currently being dragged. */\n    isDragging(drag) {\n        return this._activeDragInstances.has(drag);\n    }\n    ngOnDestroy() {\n        this._dragInstances.forEach(instance => this.removeDragItem(instance));\n        this._dropInstances.forEach(instance => this.removeDropContainer(instance));\n        this._clearGlobalListeners();\n        this.pointerMove.complete();\n        this.pointerUp.complete();\n    }\n    /** Clears out the global event listeners from the `document`. */\n    _clearGlobalListeners() {\n        this._globalListeners.forEach((config, name) => {\n            this._document.removeEventListener(name, config.handler, config.options);\n        });\n        this._globalListeners.clear();\n    }\n}\nDragDropRegistry.ɵfac = function DragDropRegistry_Factory(t) { return new (t || DragDropRegistry)(ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(DOCUMENT)); };\nDragDropRegistry.ɵprov = ɵɵdefineInjectable({ factory: function DragDropRegistry_Factory() { return new DragDropRegistry(ɵɵinject(NgZone), ɵɵinject(DOCUMENT)); }, token: DragDropRegistry, providedIn: \"root\" });\nDragDropRegistry.ctorParameters = () => [\n    { type: NgZone },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropRegistry, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: NgZone }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Default configuration to be used when creating a `DragRef`. */\nconst DEFAULT_CONFIG = {\n    dragStartThreshold: 5,\n    pointerDirectionChangeThreshold: 5\n};\n/**\n * Service that allows for drag-and-drop functionality to be attached to DOM elements.\n */\nclass DragDrop {\n    constructor(_document, _ngZone, _viewportRuler, _dragDropRegistry) {\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewportRuler = _viewportRuler;\n        this._dragDropRegistry = _dragDropRegistry;\n    }\n    /**\n     * Turns an element into a draggable item.\n     * @param element Element to which to attach the dragging functionality.\n     * @param config Object used to configure the dragging behavior.\n     */\n    createDrag(element, config = DEFAULT_CONFIG) {\n        return new DragRef(element, config, this._document, this._ngZone, this._viewportRuler, this._dragDropRegistry);\n    }\n    /**\n     * Turns an element into a drop list.\n     * @param element Element to which to attach the drop list functionality.\n     */\n    createDropList(element) {\n        return new DropListRef(element, this._dragDropRegistry, this._document, this._ngZone, this._viewportRuler);\n    }\n}\nDragDrop.ɵfac = function DragDrop_Factory(t) { return new (t || DragDrop)(ɵngcc0.ɵɵinject(DOCUMENT), ɵngcc0.ɵɵinject(NgZone), ɵngcc0.ɵɵinject(ViewportRuler), ɵngcc0.ɵɵinject(DragDropRegistry)); };\nDragDrop.ɵprov = ɵɵdefineInjectable({ factory: function DragDrop_Factory() { return new DragDrop(ɵɵinject(DOCUMENT), ɵɵinject(NgZone), ɵɵinject(ViewportRuler), ɵɵinject(DragDropRegistry)); }, token: DragDrop, providedIn: \"root\" });\nDragDrop.ctorParameters = () => [\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewportRuler },\n    { type: DragDropRegistry }\n];\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDrop, [{\n        type: Injectable,\n        args: [{ providedIn: 'root' }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: NgZone }, { type: ViewportRuler }, { type: DragDropRegistry }]; }, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDropListGroup`. It serves as\n * alternative token to the actual `CdkDropListGroup` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST_GROUP = new InjectionToken('CdkDropListGroup');\n/**\n * Declaratively connects sibling `cdkDropList` instances together. All of the `cdkDropList`\n * elements that are placed inside a `cdkDropListGroup` will be connected to each other\n * automatically. Can be used as an alternative to the `cdkDropListConnectedTo` input\n * from `cdkDropList`.\n */\nclass CdkDropListGroup {\n    constructor() {\n        /** Drop lists registered inside the group. */\n        this._items = new Set();\n        this._disabled = false;\n    }\n    /** Whether starting a dragging sequence from inside this group is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n    }\n    ngOnDestroy() {\n        this._items.clear();\n    }\n}\nCdkDropListGroup.ɵfac = function CdkDropListGroup_Factory(t) { return new (t || CdkDropListGroup)(); };\nCdkDropListGroup.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropListGroup, selectors: [[\"\", \"cdkDropListGroup\", \"\"]], inputs: { disabled: [\"cdkDropListGroupDisabled\", \"disabled\"] }, exportAs: [\"cdkDropListGroup\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }])] });\nCdkDropListGroup.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDropListGroupDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropListGroup, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropListGroup]',\n                exportAs: 'cdkDropListGroup',\n                providers: [{ provide: CDK_DROP_LIST_GROUP, useExisting: CdkDropListGroup }]\n            }]\n    }], function () { return []; }, { disabled: [{\n            type: Input,\n            args: ['cdkDropListGroupDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to configure the\n * behavior of the drag&drop-related components.\n */\nconst CDK_DRAG_CONFIG = new InjectionToken('CDK_DRAG_CONFIG');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter used to generate unique ids for drop zones. */\nlet _uniqueIdCounter = 0;\n/**\n * Injection token that can be used to reference instances of `CdkDropList`. It serves as\n * alternative token to the actual `CdkDropList` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DROP_LIST = new InjectionToken('CdkDropList');\nconst ɵ0 = undefined;\n/** Container that wraps a set of draggable items. */\nclass CdkDropList {\n    constructor(\n    /** Element that the drop list is attached to. */\n    element, dragDrop, _changeDetectorRef, _dir, _group, \n    /**\n     * @deprecated _scrollDispatcher parameter to become required.\n     * @breaking-change 11.0.0\n     */\n    _scrollDispatcher, config) {\n        this.element = element;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._dir = _dir;\n        this._group = _group;\n        this._scrollDispatcher = _scrollDispatcher;\n        /** Emits when the list has been destroyed. */\n        this._destroyed = new Subject();\n        /**\n         * Other draggable containers that this container is connected to and into which the\n         * container's items can be transferred. Can either be references to other drop containers,\n         * or their unique IDs.\n         */\n        this.connectedTo = [];\n        /**\n         * Unique ID for the drop zone. Can be used as a reference\n         * in the `connectedTo` of another `CdkDropList`.\n         */\n        this.id = `cdk-drop-list-${_uniqueIdCounter++}`;\n        /**\n         * Function that is used to determine whether an item\n         * is allowed to be moved into a drop container.\n         */\n        this.enterPredicate = () => true;\n        /** Emits when the user drops an item inside the container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits when the user has moved a new drag item into this container.\n         */\n        this.entered = new EventEmitter();\n        /**\n         * Emits when the user removes an item from the container\n         * by dragging it into another container.\n         */\n        this.exited = new EventEmitter();\n        /** Emits as the user is swapping items while actively dragging. */\n        this.sorted = new EventEmitter();\n        /**\n         * Keeps track of the items that are registered with this container. Historically we used to\n         * do this with a `ContentChildren` query, however queries don't handle transplanted views very\n         * well which means that we can't handle cases like dragging the headers of a `mat-table`\n         * correctly. What we do instead is to have the items register themselves with the container\n         * and then we sort them based on their position in the DOM.\n         */\n        this._unsortedItems = new Set();\n        this._dropListRef = dragDrop.createDropList(element);\n        this._dropListRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        this._dropListRef.enterPredicate = (drag, drop) => {\n            return this.enterPredicate(drag.data, drop.data);\n        };\n        this._setupInputSyncSubscription(this._dropListRef);\n        this._handleEvents(this._dropListRef);\n        CdkDropList._dropLists.push(this);\n        if (_group) {\n            _group._items.add(this);\n        }\n    }\n    /** Whether starting a dragging sequence from this container is disabled. */\n    get disabled() {\n        return this._disabled || (!!this._group && this._group.disabled);\n    }\n    set disabled(value) {\n        // Usually we sync the directive and ref state right before dragging starts, in order to have\n        // a single point of failure and to avoid having to use setters for everything. `disabled` is\n        // a special case, because it can prevent the `beforeStarted` event from firing, which can lock\n        // the user in a disabled state, so we also need to sync it as it's being set.\n        this._dropListRef.disabled = this._disabled = coerceBooleanProperty(value);\n    }\n    /** Registers an items with the drop list. */\n    addItem(item) {\n        this._unsortedItems.add(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Removes an item from the drop list. */\n    removeItem(item) {\n        this._unsortedItems.delete(item);\n        if (this._dropListRef.isDragging()) {\n            this._syncItemsWithRef();\n        }\n    }\n    /** Gets the registered items in the list, sorted by their position in the DOM. */\n    getSortedItems() {\n        return Array.from(this._unsortedItems).sort((a, b) => {\n            const documentPosition = a._dragRef.getVisibleElement().compareDocumentPosition(b._dragRef.getVisibleElement());\n            // `compareDocumentPosition` returns a bitmask so we have to use a bitwise operator.\n            // https://developer.mozilla.org/en-US/docs/Web/API/Node/compareDocumentPosition\n            // tslint:disable-next-line:no-bitwise\n            return documentPosition & Node.DOCUMENT_POSITION_FOLLOWING ? -1 : 1;\n        });\n    }\n    ngOnDestroy() {\n        const index = CdkDropList._dropLists.indexOf(this);\n        if (index > -1) {\n            CdkDropList._dropLists.splice(index, 1);\n        }\n        if (this._group) {\n            this._group._items.delete(this);\n        }\n        this._unsortedItems.clear();\n        this._dropListRef.dispose();\n        this._destroyed.next();\n        this._destroyed.complete();\n    }\n    /** Syncs the inputs of the CdkDropList with the options of the underlying DropListRef. */\n    _setupInputSyncSubscription(ref) {\n        if (this._dir) {\n            this._dir.change\n                .pipe(startWith(this._dir.value), takeUntil(this._destroyed))\n                .subscribe(value => ref.withDirection(value));\n        }\n        ref.beforeStarted.subscribe(() => {\n            const siblings = coerceArray(this.connectedTo).map(drop => {\n                if (typeof drop === 'string') {\n                    const correspondingDropList = CdkDropList._dropLists.find(list => list.id === drop);\n                    if (!correspondingDropList && isDevMode()) {\n                        console.warn(`CdkDropList could not find connected drop list with id \"${drop}\"`);\n                    }\n                    return correspondingDropList;\n                }\n                return drop;\n            });\n            if (this._group) {\n                this._group._items.forEach(drop => {\n                    if (siblings.indexOf(drop) === -1) {\n                        siblings.push(drop);\n                    }\n                });\n            }\n            // Note that we resolve the scrollable parents here so that we delay the resolution\n            // as long as possible, ensuring that the element is in its final place in the DOM.\n            // @breaking-change 11.0.0 Remove null check for _scrollDispatcher once it's required.\n            if (!this._scrollableParentsResolved && this._scrollDispatcher) {\n                const scrollableParents = this._scrollDispatcher\n                    .getAncestorScrollContainers(this.element)\n                    .map(scrollable => scrollable.getElementRef().nativeElement);\n                this._dropListRef.withScrollableParents(scrollableParents);\n                // Only do this once since it involves traversing the DOM and the parents\n                // shouldn't be able to change without the drop list being destroyed.\n                this._scrollableParentsResolved = true;\n            }\n            ref.disabled = this.disabled;\n            ref.lockAxis = this.lockAxis;\n            ref.sortingDisabled = coerceBooleanProperty(this.sortingDisabled);\n            ref.autoScrollDisabled = coerceBooleanProperty(this.autoScrollDisabled);\n            ref\n                .connectedTo(siblings.filter(drop => drop && drop !== this).map(list => list._dropListRef))\n                .withOrientation(this.orientation);\n        });\n    }\n    /** Handles events from the underlying DropListRef. */\n    _handleEvents(ref) {\n        ref.beforeStarted.subscribe(() => {\n            this._syncItemsWithRef();\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: this,\n                item: event.item.data,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: this,\n                item: event.item.data\n            });\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.sorted.subscribe(event => {\n            this.sorted.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                container: this,\n                item: event.item.data\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                item: event.item.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                distance: event.distance\n            });\n            // Mark for check since all of these events run outside of change\n            // detection and we're not guaranteed for something else to have triggered it.\n            this._changeDetectorRef.markForCheck();\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, draggingDisabled, sortingDisabled, listAutoScrollDisabled, listOrientation } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.sortingDisabled = sortingDisabled == null ? false : sortingDisabled;\n        this.autoScrollDisabled = listAutoScrollDisabled == null ? false : listAutoScrollDisabled;\n        this.orientation = listOrientation || 'vertical';\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n    }\n    /** Syncs up the registered drag items with underlying drop list ref. */\n    _syncItemsWithRef() {\n        this._dropListRef.withItems(this.getSortedItems().map(item => item._dragRef));\n    }\n}\nCdkDropList.ɵfac = function CdkDropList_Factory(t) { return new (t || CdkDropList)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(Directionality, 8), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST_GROUP, 12), ɵngcc0.ɵɵdirectiveInject(ScrollDispatcher), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8)); };\nCdkDropList.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDropList, selectors: [[\"\", \"cdkDropList\", \"\"], [\"cdk-drop-list\"]], hostAttrs: [1, \"cdk-drop-list\"], hostVars: 7, hostBindings: function CdkDropList_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵhostProperty(\"id\", ctx.id);\n        ɵngcc0.ɵɵclassProp(\"cdk-drop-list-disabled\", ctx.disabled)(\"cdk-drop-list-dragging\", ctx._dropListRef.isDragging())(\"cdk-drop-list-receiving\", ctx._dropListRef.isReceiving());\n    } }, inputs: { connectedTo: [\"cdkDropListConnectedTo\", \"connectedTo\"], id: \"id\", enterPredicate: [\"cdkDropListEnterPredicate\", \"enterPredicate\"], disabled: [\"cdkDropListDisabled\", \"disabled\"], sortingDisabled: [\"cdkDropListSortingDisabled\", \"sortingDisabled\"], autoScrollDisabled: [\"cdkDropListAutoScrollDisabled\", \"autoScrollDisabled\"], orientation: [\"cdkDropListOrientation\", \"orientation\"], lockAxis: [\"cdkDropListLockAxis\", \"lockAxis\"], data: [\"cdkDropListData\", \"data\"] }, outputs: { dropped: \"cdkDropListDropped\", entered: \"cdkDropListEntered\", exited: \"cdkDropListExited\", sorted: \"cdkDropListSorted\" }, exportAs: [\"cdkDropList\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Prevent child drop lists from picking up the same group as their parent.\n            { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n            { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n        ])] });\n/** Keeps track of the drop lists that are currently on the page. */\nCdkDropList._dropLists = [];\nCdkDropList.ctorParameters = () => [\n    { type: ElementRef },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: CdkDropListGroup, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DROP_LIST_GROUP,] }, { type: SkipSelf }] },\n    { type: ScrollDispatcher },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] }\n];\nCdkDropList.propDecorators = {\n    connectedTo: [{ type: Input, args: ['cdkDropListConnectedTo',] }],\n    data: [{ type: Input, args: ['cdkDropListData',] }],\n    orientation: [{ type: Input, args: ['cdkDropListOrientation',] }],\n    id: [{ type: Input }],\n    lockAxis: [{ type: Input, args: ['cdkDropListLockAxis',] }],\n    disabled: [{ type: Input, args: ['cdkDropListDisabled',] }],\n    sortingDisabled: [{ type: Input, args: ['cdkDropListSortingDisabled',] }],\n    enterPredicate: [{ type: Input, args: ['cdkDropListEnterPredicate',] }],\n    autoScrollDisabled: [{ type: Input, args: ['cdkDropListAutoScrollDisabled',] }],\n    dropped: [{ type: Output, args: ['cdkDropListDropped',] }],\n    entered: [{ type: Output, args: ['cdkDropListEntered',] }],\n    exited: [{ type: Output, args: ['cdkDropListExited',] }],\n    sorted: [{ type: Output, args: ['cdkDropListSorted',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDropList, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDropList], cdk-drop-list',\n                exportAs: 'cdkDropList',\n                providers: [\n                    // Prevent child drop lists from picking up the same group as their parent.\n                    { provide: CDK_DROP_LIST_GROUP, useValue: ɵ0 },\n                    { provide: CDK_DROP_LIST, useExisting: CdkDropList },\n                ],\n                host: {\n                    'class': 'cdk-drop-list',\n                    '[id]': 'id',\n                    '[class.cdk-drop-list-disabled]': 'disabled',\n                    '[class.cdk-drop-list-dragging]': '_dropListRef.isDragging()',\n                    '[class.cdk-drop-list-receiving]': '_dropListRef.isReceiving()'\n                }\n            }]\n    }], function () { return [{ type: ElementRef }, { type: DragDrop }, { type: ChangeDetectorRef }, { type: Directionality, decorators: [{\n                type: Optional\n            }] }, { type: CdkDropListGroup, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DROP_LIST_GROUP]\n            }, {\n                type: SkipSelf\n            }] }, { type: ScrollDispatcher }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }]; }, { connectedTo: [{\n            type: Input,\n            args: ['cdkDropListConnectedTo']\n        }], id: [{\n            type: Input\n        }], enterPredicate: [{\n            type: Input,\n            args: ['cdkDropListEnterPredicate']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDropListDropped']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDropListEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDropListExited']\n        }], sorted: [{\n            type: Output,\n            args: ['cdkDropListSorted']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDropListDisabled']\n        }], sortingDisabled: [{\n            type: Input,\n            args: ['cdkDropListSortingDisabled']\n        }], autoScrollDisabled: [{\n            type: Input,\n            args: ['cdkDropListAutoScrollDisabled']\n        }], orientation: [{\n            type: Input,\n            args: ['cdkDropListOrientation']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDropListLockAxis']\n        }], data: [{\n            type: Input,\n            args: ['cdkDropListData']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used for a `CdkDrag` to provide itself as a parent to the\n * drag-specific child directive (`CdkDragHandle`, `CdkDragPreview` etc.). Used primarily\n * to avoid circular imports.\n * @docs-private\n */\nconst CDK_DRAG_PARENT = new InjectionToken('CDK_DRAG_PARENT');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragHandle`. It serves as\n * alternative token to the actual `CdkDragHandle` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_HANDLE = new InjectionToken('CdkDragHandle');\n/** Handle that can be used to drag a CdkDrag instance. */\nclass CdkDragHandle {\n    constructor(element, parentDrag) {\n        this.element = element;\n        /** Emits when the state of the handle has changed. */\n        this._stateChanges = new Subject();\n        this._disabled = false;\n        this._parentDrag = parentDrag;\n        toggleNativeDragInteractions(element.nativeElement, false);\n    }\n    /** Whether starting to drag through this handle is disabled. */\n    get disabled() { return this._disabled; }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._stateChanges.next(this);\n    }\n    ngOnDestroy() {\n        this._stateChanges.complete();\n    }\n}\nCdkDragHandle.ɵfac = function CdkDragHandle_Factory(t) { return new (t || CdkDragHandle)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_PARENT, 12)); };\nCdkDragHandle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragHandle, selectors: [[\"\", \"cdkDragHandle\", \"\"]], hostAttrs: [1, \"cdk-drag-handle\"], inputs: { disabled: [\"cdkDragHandleDisabled\", \"disabled\"] }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }])] });\nCdkDragHandle.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DRAG_PARENT,] }, { type: Optional }, { type: SkipSelf }] }\n];\nCdkDragHandle.propDecorators = {\n    disabled: [{ type: Input, args: ['cdkDragHandleDisabled',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragHandle, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDragHandle]',\n                host: {\n                    'class': 'cdk-drag-handle'\n                },\n                providers: [{ provide: CDK_DRAG_HANDLE, useExisting: CdkDragHandle }]\n            }]\n    }], function () { return [{ type: ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DRAG_PARENT]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }]; }, { disabled: [{\n            type: Input,\n            args: ['cdkDragHandleDisabled']\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPlaceholder`. It serves as\n * alternative token to the actual `CdkDragPlaceholder` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PLACEHOLDER = new InjectionToken('CdkDragPlaceholder');\n/**\n * Element that will be used as a template for the placeholder of a CdkDrag when\n * it is being dragged. The placeholder is displayed in place of the element being dragged.\n */\nclass CdkDragPlaceholder {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n    }\n}\nCdkDragPlaceholder.ɵfac = function CdkDragPlaceholder_Factory(t) { return new (t || CdkDragPlaceholder)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); };\nCdkDragPlaceholder.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPlaceholder, selectors: [[\"ng-template\", \"cdkDragPlaceholder\", \"\"]], inputs: { data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }])] });\nCdkDragPlaceholder.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPlaceholder.propDecorators = {\n    data: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPlaceholder, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPlaceholder]',\n                providers: [{ provide: CDK_DRAG_PLACEHOLDER, useExisting: CdkDragPlaceholder }]\n            }]\n    }], function () { return [{ type: TemplateRef }]; }, { data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Injection token that can be used to reference instances of `CdkDragPreview`. It serves as\n * alternative token to the actual `CdkDragPreview` class which could cause unnecessary\n * retention of the class and its directive metadata.\n */\nconst CDK_DRAG_PREVIEW = new InjectionToken('CdkDragPreview');\n/**\n * Element that will be used as a template for the preview\n * of a CdkDrag when it is being dragged.\n */\nclass CdkDragPreview {\n    constructor(templateRef) {\n        this.templateRef = templateRef;\n        this._matchSize = false;\n    }\n    /** Whether the preview should preserve the same size as the item that is being dragged. */\n    get matchSize() { return this._matchSize; }\n    set matchSize(value) { this._matchSize = coerceBooleanProperty(value); }\n}\nCdkDragPreview.ɵfac = function CdkDragPreview_Factory(t) { return new (t || CdkDragPreview)(ɵngcc0.ɵɵdirectiveInject(TemplateRef)); };\nCdkDragPreview.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDragPreview, selectors: [[\"ng-template\", \"cdkDragPreview\", \"\"]], inputs: { matchSize: \"matchSize\", data: \"data\" }, features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }])] });\nCdkDragPreview.ctorParameters = () => [\n    { type: TemplateRef }\n];\nCdkDragPreview.propDecorators = {\n    data: [{ type: Input }],\n    matchSize: [{ type: Input }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDragPreview, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[cdkDragPreview]',\n                providers: [{ provide: CDK_DRAG_PREVIEW, useExisting: CdkDragPreview }]\n            }]\n    }], function () { return [{ type: TemplateRef }]; }, { matchSize: [{\n            type: Input\n        }], data: [{\n            type: Input\n        }] }); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Element that can be moved inside a CdkDropList container. */\nclass CdkDrag {\n    constructor(\n    /** Element that the draggable is attached to. */\n    element, \n    /** Droppable container that the draggable is a part of. */\n    dropContainer, _document, _ngZone, _viewContainerRef, config, _dir, dragDrop, _changeDetectorRef, _selfHandle) {\n        this.element = element;\n        this.dropContainer = dropContainer;\n        this._document = _document;\n        this._ngZone = _ngZone;\n        this._viewContainerRef = _viewContainerRef;\n        this._dir = _dir;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._selfHandle = _selfHandle;\n        this._destroyed = new Subject();\n        /** Emits when the user starts dragging the item. */\n        this.started = new EventEmitter();\n        /** Emits when the user has released a drag item, before any animations have started. */\n        this.released = new EventEmitter();\n        /** Emits when the user stops dragging an item in the container. */\n        this.ended = new EventEmitter();\n        /** Emits when the user has moved the item into a new container. */\n        this.entered = new EventEmitter();\n        /** Emits when the user removes the item its container by dragging it into another container. */\n        this.exited = new EventEmitter();\n        /** Emits when the user drops the item inside a container. */\n        this.dropped = new EventEmitter();\n        /**\n         * Emits as the user is dragging the item. Use with caution,\n         * because this event will fire for every pixel that the user has dragged.\n         */\n        this.moved = new Observable((observer) => {\n            const subscription = this._dragRef.moved.pipe(map(movedEvent => ({\n                source: this,\n                pointerPosition: movedEvent.pointerPosition,\n                event: movedEvent.event,\n                delta: movedEvent.delta,\n                distance: movedEvent.distance\n            }))).subscribe(observer);\n            return () => {\n                subscription.unsubscribe();\n            };\n        });\n        this._dragRef = dragDrop.createDrag(element, {\n            dragStartThreshold: config && config.dragStartThreshold != null ?\n                config.dragStartThreshold : 5,\n            pointerDirectionChangeThreshold: config && config.pointerDirectionChangeThreshold != null ?\n                config.pointerDirectionChangeThreshold : 5,\n            zIndex: config === null || config === void 0 ? void 0 : config.zIndex\n        });\n        this._dragRef.data = this;\n        if (config) {\n            this._assignDefaults(config);\n        }\n        // Note that usually the container is assigned when the drop list is picks up the item, but in\n        // some cases (mainly transplanted views with OnPush, see #18341) we may end up in a situation\n        // where there are no items on the first change detection pass, but the items get picked up as\n        // soon as the user triggers another pass by dragging. This is a problem, because the item would\n        // have to switch from standalone mode to drag mode in the middle of the dragging sequence which\n        // is too late since the two modes save different kinds of information. We work around it by\n        // assigning the drop container both from here and the list.\n        if (dropContainer) {\n            this._dragRef._withDropContainer(dropContainer._dropListRef);\n            dropContainer.addItem(this);\n        }\n        this._syncInputs(this._dragRef);\n        this._handleEvents(this._dragRef);\n    }\n    /** Whether starting to drag this element is disabled. */\n    get disabled() {\n        return this._disabled || (this.dropContainer && this.dropContainer.disabled);\n    }\n    set disabled(value) {\n        this._disabled = coerceBooleanProperty(value);\n        this._dragRef.disabled = this._disabled;\n    }\n    /**\n     * Returns the element that is being used as a placeholder\n     * while the current element is being dragged.\n     */\n    getPlaceholderElement() {\n        return this._dragRef.getPlaceholderElement();\n    }\n    /** Returns the root draggable element. */\n    getRootElement() {\n        return this._dragRef.getRootElement();\n    }\n    /** Resets a standalone drag item to its initial position. */\n    reset() {\n        this._dragRef.reset();\n    }\n    /**\n     * Gets the pixel coordinates of the draggable outside of a drop container.\n     */\n    getFreeDragPosition() {\n        return this._dragRef.getFreeDragPosition();\n    }\n    ngAfterViewInit() {\n        // We need to wait for the zone to stabilize, in order for the reference\n        // element to be in the proper place in the DOM. This is mostly relevant\n        // for draggable elements inside portals since they get stamped out in\n        // their original DOM position and then they get transferred to the portal.\n        this._ngZone.onStable.asObservable()\n            .pipe(take(1), takeUntil(this._destroyed))\n            .subscribe(() => {\n            this._updateRootElement();\n            // Listen for any newly-added handles.\n            this._handles.changes.pipe(startWith(this._handles), \n            // Sync the new handles with the DragRef.\n            tap((handles) => {\n                const childHandleElements = handles\n                    .filter(handle => handle._parentDrag === this)\n                    .map(handle => handle.element);\n                // Usually handles are only allowed to be a descendant of the drag element, but if\n                // the consumer defined a different drag root, we should allow the drag element\n                // itself to be a handle too.\n                if (this._selfHandle && this.rootElementSelector) {\n                    childHandleElements.push(this.element);\n                }\n                this._dragRef.withHandles(childHandleElements);\n            }), \n            // Listen if the state of any of the handles changes.\n            switchMap((handles) => {\n                return merge(...handles.map(item => {\n                    return item._stateChanges.pipe(startWith(item));\n                }));\n            }), takeUntil(this._destroyed)).subscribe(handleInstance => {\n                // Enabled/disable the handle that changed in the DragRef.\n                const dragRef = this._dragRef;\n                const handle = handleInstance.element.nativeElement;\n                handleInstance.disabled ? dragRef.disableHandle(handle) : dragRef.enableHandle(handle);\n            });\n            if (this.freeDragPosition) {\n                this._dragRef.setFreeDragPosition(this.freeDragPosition);\n            }\n        });\n    }\n    ngOnChanges(changes) {\n        const rootSelectorChange = changes['rootElementSelector'];\n        const positionChange = changes['freeDragPosition'];\n        // We don't have to react to the first change since it's being\n        // handled in `ngAfterViewInit` where it needs to be deferred.\n        if (rootSelectorChange && !rootSelectorChange.firstChange) {\n            this._updateRootElement();\n        }\n        // Skip the first change since it's being handled in `ngAfterViewInit`.\n        if (positionChange && !positionChange.firstChange && this.freeDragPosition) {\n            this._dragRef.setFreeDragPosition(this.freeDragPosition);\n        }\n    }\n    ngOnDestroy() {\n        if (this.dropContainer) {\n            this.dropContainer.removeItem(this);\n        }\n        this._destroyed.next();\n        this._destroyed.complete();\n        this._dragRef.dispose();\n    }\n    /** Syncs the root element with the `DragRef`. */\n    _updateRootElement() {\n        const element = this.element.nativeElement;\n        const rootElement = this.rootElementSelector ?\n            getClosestMatchingAncestor(element, this.rootElementSelector) : element;\n        if (rootElement && rootElement.nodeType !== this._document.ELEMENT_NODE) {\n            throw Error(`cdkDrag must be attached to an element node. ` +\n                `Currently attached to \"${rootElement.nodeName}\".`);\n        }\n        this._dragRef.withRootElement(rootElement || element);\n    }\n    /** Gets the boundary element, based on the `boundaryElement` value. */\n    _getBoundaryElement() {\n        const boundary = this.boundaryElement;\n        if (!boundary) {\n            return null;\n        }\n        if (typeof boundary === 'string') {\n            return getClosestMatchingAncestor(this.element.nativeElement, boundary);\n        }\n        const element = coerceElement(boundary);\n        if (isDevMode() && !element.contains(this.element.nativeElement)) {\n            throw Error('Draggable element is not inside of the node passed into cdkDragBoundary.');\n        }\n        return element;\n    }\n    /** Syncs the inputs of the CdkDrag with the options of the underlying DragRef. */\n    _syncInputs(ref) {\n        ref.beforeStarted.subscribe(() => {\n            if (!ref.isDragging()) {\n                const dir = this._dir;\n                const dragStartDelay = this.dragStartDelay;\n                const placeholder = this._placeholderTemplate ? {\n                    template: this._placeholderTemplate.templateRef,\n                    context: this._placeholderTemplate.data,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                const preview = this._previewTemplate ? {\n                    template: this._previewTemplate.templateRef,\n                    context: this._previewTemplate.data,\n                    matchSize: this._previewTemplate.matchSize,\n                    viewContainer: this._viewContainerRef\n                } : null;\n                ref.disabled = this.disabled;\n                ref.lockAxis = this.lockAxis;\n                ref.dragStartDelay = (typeof dragStartDelay === 'object' && dragStartDelay) ?\n                    dragStartDelay : coerceNumberProperty(dragStartDelay);\n                ref.constrainPosition = this.constrainPosition;\n                ref.previewClass = this.previewClass;\n                ref\n                    .withBoundaryElement(this._getBoundaryElement())\n                    .withPlaceholderTemplate(placeholder)\n                    .withPreviewTemplate(preview);\n                if (dir) {\n                    ref.withDirection(dir.value);\n                }\n            }\n        });\n    }\n    /** Handles the events from the underlying `DragRef`. */\n    _handleEvents(ref) {\n        ref.started.subscribe(() => {\n            this.started.emit({ source: this });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.released.subscribe(() => {\n            this.released.emit({ source: this });\n        });\n        ref.ended.subscribe(event => {\n            this.ended.emit({ source: this, distance: event.distance });\n            // Since all of these events run outside of change detection,\n            // we need to ensure that everything is marked correctly.\n            this._changeDetectorRef.markForCheck();\n        });\n        ref.entered.subscribe(event => {\n            this.entered.emit({\n                container: event.container.data,\n                item: this,\n                currentIndex: event.currentIndex\n            });\n        });\n        ref.exited.subscribe(event => {\n            this.exited.emit({\n                container: event.container.data,\n                item: this\n            });\n        });\n        ref.dropped.subscribe(event => {\n            this.dropped.emit({\n                previousIndex: event.previousIndex,\n                currentIndex: event.currentIndex,\n                previousContainer: event.previousContainer.data,\n                container: event.container.data,\n                isPointerOverContainer: event.isPointerOverContainer,\n                item: this,\n                distance: event.distance\n            });\n        });\n    }\n    /** Assigns the default input values based on a provided config object. */\n    _assignDefaults(config) {\n        const { lockAxis, dragStartDelay, constrainPosition, previewClass, boundaryElement, draggingDisabled, rootElementSelector } = config;\n        this.disabled = draggingDisabled == null ? false : draggingDisabled;\n        this.dragStartDelay = dragStartDelay || 0;\n        if (lockAxis) {\n            this.lockAxis = lockAxis;\n        }\n        if (constrainPosition) {\n            this.constrainPosition = constrainPosition;\n        }\n        if (previewClass) {\n            this.previewClass = previewClass;\n        }\n        if (boundaryElement) {\n            this.boundaryElement = boundaryElement;\n        }\n        if (rootElementSelector) {\n            this.rootElementSelector = rootElementSelector;\n        }\n    }\n}\nCdkDrag.ɵfac = function CdkDrag_Factory(t) { return new (t || CdkDrag)(ɵngcc0.ɵɵdirectiveInject(ElementRef), ɵngcc0.ɵɵdirectiveInject(CDK_DROP_LIST, 12), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(NgZone), ɵngcc0.ɵɵdirectiveInject(ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_CONFIG, 8), ɵngcc0.ɵɵdirectiveInject(Directionality, 8), ɵngcc0.ɵɵdirectiveInject(DragDrop), ɵngcc0.ɵɵdirectiveInject(ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(CDK_DRAG_HANDLE, 10)); };\nCdkDrag.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkDrag, selectors: [[\"\", \"cdkDrag\", \"\"]], contentQueries: function CdkDrag_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PREVIEW, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_PLACEHOLDER, true);\n        ɵngcc0.ɵɵcontentQuery(dirIndex, CDK_DRAG_HANDLE, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._previewTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._placeholderTemplate = _t.first);\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._handles = _t);\n    } }, hostAttrs: [1, \"cdk-drag\"], hostVars: 4, hostBindings: function CdkDrag_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"cdk-drag-disabled\", ctx.disabled)(\"cdk-drag-dragging\", ctx._dragRef.isDragging());\n    } }, inputs: { disabled: [\"cdkDragDisabled\", \"disabled\"], dragStartDelay: [\"cdkDragStartDelay\", \"dragStartDelay\"], lockAxis: [\"cdkDragLockAxis\", \"lockAxis\"], constrainPosition: [\"cdkDragConstrainPosition\", \"constrainPosition\"], previewClass: [\"cdkDragPreviewClass\", \"previewClass\"], boundaryElement: [\"cdkDragBoundary\", \"boundaryElement\"], rootElementSelector: [\"cdkDragRootElement\", \"rootElementSelector\"], data: [\"cdkDragData\", \"data\"], freeDragPosition: [\"cdkDragFreeDragPosition\", \"freeDragPosition\"] }, outputs: { started: \"cdkDragStarted\", released: \"cdkDragReleased\", ended: \"cdkDragEnded\", entered: \"cdkDragEntered\", exited: \"cdkDragExited\", dropped: \"cdkDragDropped\", moved: \"cdkDragMoved\" }, exportAs: [\"cdkDrag\"], features: [ɵngcc0.ɵɵProvidersFeature([{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]), ɵngcc0.ɵɵNgOnChangesFeature] });\nCdkDrag.ctorParameters = () => [\n    { type: ElementRef },\n    { type: undefined, decorators: [{ type: Inject, args: [CDK_DROP_LIST,] }, { type: Optional }, { type: SkipSelf }] },\n    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n    { type: NgZone },\n    { type: ViewContainerRef },\n    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [CDK_DRAG_CONFIG,] }] },\n    { type: Directionality, decorators: [{ type: Optional }] },\n    { type: DragDrop },\n    { type: ChangeDetectorRef },\n    { type: CdkDragHandle, decorators: [{ type: Optional }, { type: Self }, { type: Inject, args: [CDK_DRAG_HANDLE,] }] }\n];\nCdkDrag.propDecorators = {\n    _handles: [{ type: ContentChildren, args: [CDK_DRAG_HANDLE, { descendants: true },] }],\n    _previewTemplate: [{ type: ContentChild, args: [CDK_DRAG_PREVIEW,] }],\n    _placeholderTemplate: [{ type: ContentChild, args: [CDK_DRAG_PLACEHOLDER,] }],\n    data: [{ type: Input, args: ['cdkDragData',] }],\n    lockAxis: [{ type: Input, args: ['cdkDragLockAxis',] }],\n    rootElementSelector: [{ type: Input, args: ['cdkDragRootElement',] }],\n    boundaryElement: [{ type: Input, args: ['cdkDragBoundary',] }],\n    dragStartDelay: [{ type: Input, args: ['cdkDragStartDelay',] }],\n    freeDragPosition: [{ type: Input, args: ['cdkDragFreeDragPosition',] }],\n    disabled: [{ type: Input, args: ['cdkDragDisabled',] }],\n    constrainPosition: [{ type: Input, args: ['cdkDragConstrainPosition',] }],\n    previewClass: [{ type: Input, args: ['cdkDragPreviewClass',] }],\n    started: [{ type: Output, args: ['cdkDragStarted',] }],\n    released: [{ type: Output, args: ['cdkDragReleased',] }],\n    ended: [{ type: Output, args: ['cdkDragEnded',] }],\n    entered: [{ type: Output, args: ['cdkDragEntered',] }],\n    exited: [{ type: Output, args: ['cdkDragExited',] }],\n    dropped: [{ type: Output, args: ['cdkDragDropped',] }],\n    moved: [{ type: Output, args: ['cdkDragMoved',] }]\n};\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkDrag, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkDrag]',\n                exportAs: 'cdkDrag',\n                host: {\n                    'class': 'cdk-drag',\n                    '[class.cdk-drag-disabled]': 'disabled',\n                    '[class.cdk-drag-dragging]': '_dragRef.isDragging()'\n                },\n                providers: [{ provide: CDK_DRAG_PARENT, useExisting: CdkDrag }]\n            }]\n    }], function () { return [{ type: ElementRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [CDK_DROP_LIST]\n            }, {\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: NgZone }, { type: ViewContainerRef }, { type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_CONFIG]\n            }] }, { type: Directionality, decorators: [{\n                type: Optional\n            }] }, { type: DragDrop }, { type: ChangeDetectorRef }, { type: CdkDragHandle, decorators: [{\n                type: Optional\n            }, {\n                type: Self\n            }, {\n                type: Inject,\n                args: [CDK_DRAG_HANDLE]\n            }] }]; }, { started: [{\n            type: Output,\n            args: ['cdkDragStarted']\n        }], released: [{\n            type: Output,\n            args: ['cdkDragReleased']\n        }], ended: [{\n            type: Output,\n            args: ['cdkDragEnded']\n        }], entered: [{\n            type: Output,\n            args: ['cdkDragEntered']\n        }], exited: [{\n            type: Output,\n            args: ['cdkDragExited']\n        }], dropped: [{\n            type: Output,\n            args: ['cdkDragDropped']\n        }], moved: [{\n            type: Output,\n            args: ['cdkDragMoved']\n        }], disabled: [{\n            type: Input,\n            args: ['cdkDragDisabled']\n        }], dragStartDelay: [{\n            type: Input,\n            args: ['cdkDragStartDelay']\n        }], lockAxis: [{\n            type: Input,\n            args: ['cdkDragLockAxis']\n        }], constrainPosition: [{\n            type: Input,\n            args: ['cdkDragConstrainPosition']\n        }], previewClass: [{\n            type: Input,\n            args: ['cdkDragPreviewClass']\n        }], boundaryElement: [{\n            type: Input,\n            args: ['cdkDragBoundary']\n        }], rootElementSelector: [{\n            type: Input,\n            args: ['cdkDragRootElement']\n        }], _handles: [{\n            type: ContentChildren,\n            args: [CDK_DRAG_HANDLE, { descendants: true }]\n        }], _previewTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PREVIEW]\n        }], _placeholderTemplate: [{\n            type: ContentChild,\n            args: [CDK_DRAG_PLACEHOLDER]\n        }], data: [{\n            type: Input,\n            args: ['cdkDragData']\n        }], freeDragPosition: [{\n            type: Input,\n            args: ['cdkDragFreeDragPosition']\n        }] }); })();\n/** Gets the closest ancestor of an element that matches a selector. */\nfunction getClosestMatchingAncestor(element, selector) {\n    let currentElement = element.parentElement;\n    while (currentElement) {\n        // IE doesn't support `matches` so we have to fall back to `msMatchesSelector`.\n        if (currentElement.matches ? currentElement.matches(selector) :\n            currentElement.msMatchesSelector(selector)) {\n            return currentElement;\n        }\n        currentElement = currentElement.parentElement;\n    }\n    return null;\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nclass DragDropModule {\n}\nDragDropModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DragDropModule });\nDragDropModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DragDropModule_Factory(t) { return new (t || DragDropModule)(); }, providers: [\n        DragDrop,\n    ], imports: [CdkScrollableModule] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DragDropModule, { declarations: function () { return [CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; }, exports: function () { return [CdkScrollableModule, CdkDropList, CdkDropListGroup, CdkDrag, CdkDragHandle, CdkDragPreview, CdkDragPlaceholder]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DragDropModule, [{\n        type: NgModule,\n        args: [{\n                declarations: [\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                exports: [\n                    CdkScrollableModule,\n                    CdkDropList,\n                    CdkDropListGroup,\n                    CdkDrag,\n                    CdkDragHandle,\n                    CdkDragPreview,\n                    CdkDragPlaceholder,\n                ],\n                providers: [\n                    DragDrop,\n                ]\n            }]\n    }], null, null); })();\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_DRAG_CONFIG, CDK_DRAG_HANDLE, CDK_DRAG_PLACEHOLDER, CDK_DRAG_PREVIEW, CDK_DROP_LIST_GROUP, CdkDrag, CdkDragHandle, CdkDragPlaceholder, CdkDragPreview, CdkDropList, CdkDropListGroup, DragDrop, DragDropModule, DragDropRegistry, DragRef, DropListRef, copyArrayItem, moveItemInArray, transferArrayItem, CDK_DROP_LIST as ɵangular_material_src_cdk_drag_drop_drag_drop_b, CDK_DRAG_PARENT as ɵangular_material_src_cdk_drag_drop_drag_drop_c };\n\n//# sourceMappingURL=drag-drop.js.map"]}